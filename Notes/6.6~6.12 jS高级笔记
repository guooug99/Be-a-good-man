4.2、字符串方法
trim()方法会从一个字符串的两端删除空白字符
str.trim();
trim()方法并不影响原字符串本身，它返回的是一个新的字符串
<body>
    <input type="text"> <button>点击</button>
    <div></div>
    <script>
        // trim 方法去除字符串两侧空格
        var str = '   an  dy   ';
        console.log(str);
        var str1 = str.trim();
        console.log(str1);//an  dy
        var input = document.querySelector('input');
        var btn = document.querySelector('button');
        var div = document.querySelector('div');
        btn.onclick = function() {
            //防止表单里只输入了几个空格就让div显示了
            var str = input.value.trim();
            if (str === '') {
                alert('请输入内容');
            } else {
                console.log(str);
                console.log(str.length);
                div.innerHTML = str;
            }
        }
    </script>
</body>
4.3、对象方法
4.3.1、Object.keys()
Object.keys()用于获取对象自身所有的属性名
效果类似for...in
返回一个由属性名组成的数组
<body>
    <script>
        // 用于获取对象自身所有的属性
        var obj = {
            id: 1,
            pname: '小米',
            price: 1999,
            num: 2000
        };
        var arr = Object.keys(obj);
        console.log(arr);//Array(4)
        arr.forEach(function(value) {
            console.log(value);
            // id
            // pname
            // price
            // num
        })
    </script>
</body>
4.3.2、Object.defineProperty()
Object.defineProperty()（翻译：重新定义属性）定义对象中新属性或修改原有的属性(了解)
Object.defineProperty(obj,prop,descriptor)
obj : 目标对象
prop : 需定义或修改的属性的名字
descriptor : 目标属性所拥有的特性
第三个参数 descriptor 说明：以对象形式{ }书写
value：设置属性的值，默认为undefined
writeable: 值是否可以重写（修改属性值） true | false 默认为false，如果值为false 不允许修改这个属性值 默认值也是false
enumerable: 目标属性是否可以被枚举(是否能被遍历出来) true | false 默认为false，enumerable 如果值为false 则不允许遍历
configurable: 目标属性是否可以被删除或是否可以再次修改特性（即writeable、enumerable、configurable） true | false 默认为false，configurable 如果为false 则不允许删除这个属性

<body>
    <script>
        // Object.defineProperty() 定义新属性或修改原有的属性
        var obj = {
            id: 1,
            pname: '小米',
            price: 1999
        };
        // 1. 以前的对象添加和修改属性的方式
        // obj.num = 1000;
        // obj.price = 99;
        // console.log(obj);
        // 2. Object.defineProperty() 定义新属性或修改原有的属性
        Object.defineProperty(obj, 'num', {
            value: 1000,
            enumerable: true
        });
        console.log(obj);
        Object.defineProperty(obj, 'price', {
            value: 9.9
        });
        console.log(obj);
        Object.defineProperty(obj, 'id', {
            // 如果值为false 不允许修改这个属性值 默认值也是false
            writable: false,
        });
        obj.id = 2;
        console.log(obj);
        Object.defineProperty(obj, 'address', {
            value: '中国山东蓝翔技校xx单元',
            // 如果只为false 不允许修改这个属性值 默认值也是false
            writable: false,
            // enumerable 如果值为false 则不允许遍历, 默认的值是 false
            enumerable: false,
            // configurable 如果为false 则不允许删除这个属性 不允许在修改第三个参数里面的特性 默认为false
            configurable: false
        });
        console.log(obj);
        console.log(Object.keys(obj));
        delete obj.address;
        console.log(obj);
        delete obj.pname;
        console.log(obj);
        Object.defineProperty(obj, 'address', {
            value: '中国山东蓝翔技校xx单元',
            // 如果值为false 不允许修改这个属性值 默认值也是false
            writable: true,
            // enumerable 如果值为false 则不允许遍历, 默认的值是 false
            enumerable: true,
            // configurable 如果为false 则不允许删除这个属性 默认为false
            configurable: true
        });
        //报错！上面configurable设置为false了，不能再修改address特性了
        console.log(obj.address);
    </script>
</body>

5、函数进阶
5.1、函数的定义方式
函数声明方式 function 关键字(命名函数)
函数表达式(匿名函数)
new Function()（Function就是一个构造函数）
var fn = new Function('参数1','参数2',.....,'函数体');
 Function 里面参数都必须是字符串格式 
 第三种方式执行效率低，也不方便书写，因此较少使用 
 所有函数都是 Function 的实例(对象) 
 函数也属于对象 


<script>
        //  函数的定义方式

        // 1. 自定义函数(命名函数) 

        function fn() {};

        // 2. 函数表达式 (匿名函数)

        var fun = function() {};


        // 3. 利用 new Function('参数1','参数2', '函数体');

        var f = new Function('a', 'b', 'console.log(a + b)');
        f(1, 2);//调用函数
        // 4. 所有函数都是 Function 的实例(对象)
        console.dir(f);
        // 5. 函数也属于对象
        console.log(f instanceof Object);
    </script>
5.2、函数的调用方式
普通函数
对象的方法
构造函数
绑定事件函数
定时器函数
立即执行函数
<body>
    <script>
        // 函数的调用方式

        // 1. 普通函数
        function fn() {
            console.log('人生的巅峰');

        }
        // fn();   fn.call()
        // 2. 对象的方法
        var o = {
            sayHi: function() {
                console.log('人生的巅峰');

            }
        }
        o.sayHi();
        // 3. 构造函数  调用方法：new一下
        function Star() {};
        new Star();
        // 4. 绑定事件函数
        // btn.onclick = function() {};   // 点击了按钮就可以调用这个函数
        // 5. 定时器函数
        // setInterval(function() {}, 1000);  这个函数是定时器自动1秒钟调用一次
        // 6. 立即执行函数
        (function() {
            console.log('人生的巅峰');
        })();
        // 立即执行函数是自动调用
    </script>
</body>

5.3、函数内this的指向
this指向，是当我们调用函数的时候确定的，调用方式的不同决定了this的指向不同，一般我们指向我们的调用者
调用方式this指向普通函数调用window构造函数调用实例对象，原型对象里面的方法也指向实例对象对象方法调用该方法所属对象事件绑定方法绑定事件对象定时器函数（定时器里面的函数function）window立即执行函数window
<body>
    <button>点击</button>
    <script>
        // 函数的不同调用方式决定了this 的指向不同
        // 1. 普通函数 this 指向window
        function fn() {
            console.log('普通函数的this' + this);
        }
        window.fn();
        // 2. 对象的方法 this指向的是对象 o
        var o = {
            sayHi: function() {
                console.log('对象方法的this:' + this);
            }
        }
        o.sayHi();
        // 3. 构造函数 this 指向 ldh 这个实例对象 原型对象里面的this 指向的也是 ldh这个实例对象
        function Star() {};
        Star.prototype.sing = function() {

        }
        var ldh = new Star();
        // 4. 绑定事件函数 this 指向的是函数的调用者 btn这个按钮对象，绑定事件对象
        var btn = document.querySelector('button');
        btn.onclick = function() {
            console.log('绑定时间函数的this:' + this);
        };
        // 5. 定时器函数 this 指向的也是window
        window.setTimeout(function() {
            console.log('定时器的this:' + this);

        }, 1000);
        // 6. 立即执行函数 this还是指向window
        (function() {
            console.log('立即执行函数的this' + this);
        })();
    </script>
</body>

5.4、改变函数内部this指向
· JavaScript 为我们专门提供了一些函数方法来帮我们处理函数内部 this 的指向问题，常用的有 bind(),call(),apply()三种方法
5.4.1、call() 方法
· call()方法调用一个对象，简单理解为调用函数的方式，但是它可以改变函数的this指向
fun.call(thisArg,arg1,arg2,.....)
thisArg: 在 fun 函数运行时指定的 this 值
arg1,arg2: 传递的其他参数
返回值就是函数的返回值，因为它就是调用函数
因此当我们想改变 this 指向，同时想调用这个函数的时候，可以使用 call，比如继承
<body>
    <script>
        // 改变函数内this指向  js提供了三种方法  call()  apply()  bind()

        // 1. call()
        var o = {
            name: 'andy'
        }

        function fn(a, b) {
            console.log(this);
            console.log(a + b);

        };
        fn.call(o, 1, 2);
        // call 第一个可以调用函数 第二个可以改变函数内的this 指向
        // call 的主要作用可以实现继承
        function Father(uname, age, sex) {
            this.uname = uname;
            this.age = age;
            this.sex = sex;
        }

        function Son(uname, age, sex) {
            Father.call(this, uname, age, sex);
        }
        var son = new Son('刘德华', 18, '男');
        console.log(son);
    </script>
</body>

5.4.2、apply()方法
· apply()方法调用一个函数，简单理解为调用函数的方式，但是它可以改变函数的 this指向
fun.apply(thisArg,[argsArray])
· thisArg: 在 fun 函数运行时指定的 this 值
· argsArray : 传递的值，必须包含在数组里面
· 返回值就是函数的返回值（不再以数组的形式输出，数组里是什么类型它就输出什么类型），因为它就是调用函数
· 因此 apply 主要跟数组有关系，比如使用 Math.max() 求数组的最大值
<body>
    <script>
        // 改变函数内this指向  js提供了三种方法  call()  apply()  bind()

        // 2. apply()  应用 运用的意思
        var o = {
            name: 'andy'
        };

        function fn(arr) {
            console.log(this);
            console.log(arr); // 'pink'

        };
        fn.apply(o, ['pink']);
        // 1. 也是调用函数 第二个可以改变函数内部的this指向
        // 2. 但是他的参数必须是数组(伪数组)
        // 3. apply 的主要应用 比如说我们可以利用 apply 借助于数学内置对象求数组最大值 (Math的内置函数数组不能直接调用)
        // Math.max();
        var arr = [1, 66, 3, 99, 4];
        var arr1 = ['red', 'pink'];
        // var max = Math.max.apply(null, arr);
        var max = Math.max.apply(Math, arr);//写null不太好，最好指向函数的调用者也就是Math
        var min = Math.min.apply(Math, arr);
        console.log(max, min);
    </script>
</body>

5.4.3、bind()方法
bind()方法不会调用函数。但是能改变函数内部 this指向
fun.bind(thisArg,arg1,arg2,....)
thisArg: 在 fun 函数运行时指定的 this 值
arg1,arg2: 传递的其他参数
返回由指定的 this值和初始化参数改造的 原函数拷贝
因此当我们只是想改变 this 指向，并且不想调用这个函数的时候，可以使用bind
<body>
    <button>点击</button>
    <button>点击</button>
    <button>点击</button>
    <script>
        // 改变函数内this指向  js提供了三种方法  call()  apply()  bind()

        // 3. bind()  绑定 捆绑的意思
        var o = {
            name: 'andy'
        };

        function fn(a, b) {
            console.log(this);
            console.log(a + b);


        };
        var f = fn.bind(o, 1, 2);
        f();//返回由指定的 this值和初始化参数改造的 原函数拷贝, f()；这样可以调用
        
        // 1. 不会调用原来的函数   可以改变原来函数内部的this 指向
        // 2. 返回的是原函数改变this之后产生的新函数
        // 3. 如果有的函数我们不需要立即调用,但是又想改变这个函数内部的this指向此时用bind
        // 4. 我们有一个按钮,当我们点击了之后,就禁用这个按钮,3秒钟之后开启这个按钮
        // var btn1 = document.querySelector('button');
        // btn1.onclick = function() {
        //     this.disabled = true; // 这个this 指向的是 btn 这个按钮
        //     // var that = this;
        //     setTimeout(function() {
        //         // that.disabled = false; // 定时器函数里面的this 指向的是window
        //         this.disabled = false; // 此时定时器函数里面的this 指向的是btn
        //     }.bind(this), 3000); // 这个this 指向的是btn 这个对象,因为bind(this)在定时器的function函数的外面
        // }
        var btns = document.querySelectorAll('button');
        for (var i = 0; i < btns.length; i++) {
            btns[i].onclick = function() {
                this.disabled = true;
                setTimeout(function() {
                  //btn[i].disabled = false;//会报错，因为两秒钟以后才执行这个函数，而此时for循环已经遍历结束了，i=4了
                    this.disabled = false;
                }.bind(this), 2000);
            }
        }
    </script>
</body>

call apply bind 总结：
相同点：
都可以改变函数内部的 this指向
区别点：
call和apply会调用函数，并且改变函数内部的this指向
call和apply传递的参数不一样，call 传递参数，apply 必须数组形式
bind不会调用函数，可以改变函数内部this指向
主要应用场景
call经常做继承
apply经常跟数组有关系，比如借助于数学对线实现数组最大值与最小值
bind不调用函数，但是还想改变this指向，比如改变定时器内部的this指向


1、严格模式
JavaScript 除了提供正常模式外，还提供了严格模式，ES5的严格模式是采用具有限制性
ES5 的严格模式是采用具有限制性 JavaScript 变体的一种方式，即在严格的条件下运行 JS 代码
严格模式在IE10 以上版本的浏览器才会被支持，旧版本浏览器会被忽略
严格模式对正常的JavaScript语义做了一些更改：
消除了Javascript 语法的一些不合理、不严谨之处，减少了一些怪异行为
消除代码运行的一些不安全之处，保证代码运行的安全
提高编译器效率，增加运行速度
禁用了在 ECMAScript 的未来版本中可能会定义的一些语法，为未来新版本的 Javascript 做好铺垫。比如一些保留字如：class, enum, export, extends, import, super 不能做变量名
1.1、开启严格模式
严格模式可以应用到整个脚本或个别函数中。
因此在使用时，我们可以将严格模式分为为脚本开启严格模式和为函数开启严格模式两种情况
1.1.2、为脚本开启严格模式
 为整个脚本文件开启严格模式，需要在所有语句之前放一个特定语句 
 "use strict" 或'use strict' 
<script>
    'user strict';
	console.log("这是严格模式。");
</script>
因为"use strict"加了引号，所以老版本的浏览器会把它当作一行普通字符串而忽略。
有的 script 基本是严格模式，有的 script 脚本是正常模式，这样不利于文件合并，所以可以将整个脚本文件放在一个立即执行的匿名函数之中。这样独立创建一个作用域而不影响其他 script 脚本文件。
<script>

</script>
<script>
	(function (){
    	'use strict';
    	 var num = 10;
    	 function fn() {}
	})();   
</script>
1.1.2、为函数开启严格模式
若要给某个函数开启严格模式，需要把"use strict"或'use strict'声明放在函数体所有语句之前
<body>
    <!-- 为整个脚本(script标签)开启严格模式 -->
    <script>
        'use strict';
        //   下面的js 代码就会按照严格模式执行代码
    </script>
    <script>
        (function() {
            'use strict';
        })();
    </script>
    <!-- 为某个函数开启严格模式 -->
    <script>
        // 此时只是给fn函数开启严格模式
        function fn() {
            'use strict';
            // 下面的代码按照严格模式执行
        }

        function fun() {
            // 里面的还是按照普通模式执行
        }
    </script>
</body>
将"use strict" 放在函数体的第一行，则整个函数以 "严格模式"运行。
2、严格模式中的变化
严格模式对JavaScript的语法和行为，都做了一些改变
2.1、变量规定
在正常模式中，如果一个变量没有声明就赋值，默认是全局变量
严格模式禁止这种用法，变量都必须先用var 命令声明，然后再使用
严禁删除已经声明变量，例如，``delete x` 语法是错误的
<body>
    <script>
        'use strict';
        // 1. 我们的变量名必须先声明再使用
        // num = 10;
        // console.log(num);
        var num = 10;
        console.log(num);
        // 2.我们不能随意删除已经声明好的变量
        // delete num;
    </script>
</body>
2.2、严格模式下this指向问题
1.以前在全局作用域函数中的this指向window对象
2.严格模式下全局作用域中函数中的this 是 undefined
3.以前构造函数时不加 new 也可以调用，当普通函数调用，this指向全局对象
4.严格模式下，如果构造函数不加 new 调用，当做普通函数调用，this指向的是 undefined ，给函数内属性赋值，会报错
5.new 实例化的构造函数指向创建的对象实例
6.定时器this 还是指向window
7.事件、对象还是指向调用者
<body>
    <script>
        'use strict';
		//3. 严格模式下全局作用域中函数中的 this 是 undefined。
        function fn() {
            console.log(this); // undefined。

        }
        fn();
        //4. 严格模式下,如果 构造函数不加new调用, this 指向的是undefined  如果给他赋值则 会报错.(undefined.sex = '男',报错)
        function Star() {
            this.sex = '男';
        }
        // Star();
        //console.log(window.sex);//男  调用后，this指向全局对象
        var ldh = new Star();
        console.log(ldh.sex);
        //5. 定时器 this 还是指向 window 
        setTimeout(function() {
            console.log(this);//window

        }, 2000);
        
    </script>
</body>
2.3、函数变化
函数不能有重名的参数
<body>
    <script>
        'use strict';
        // 6. 严格模式下函数里面的参数不允许有重名
        function fn(a, a) {
           console.log(a + a);

        };
        // fn(1, 2);
        function fn() {}
    </script>
</body>
函数必须声明在顶层，新版本的JavaScript会引入“块级作用域”（ES6中已引入）。为了与新版本接轨，不允许在非函数的代码块内声明函数
if (true) {
  function f() { } // !!! 语法错误
  f();
}

for (var i = 0; i < 5; i++) {
  function f2() { } // !!! 语法错误
  f2();
}

function baz() { // 函数嵌套 合法
  function eit() { } // 同样合法
}
还有很多，比如在严格模式下不能用八进制了
更多严格模式要求参考：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode
3、高阶函数
高阶函数是对其他函数进行操作的函数，它接收函数作为参数或将函数作为返回值输出
接收函数作为参数
<body>
    <div></div>
    <script>
        // 高阶函数- 函数可以作为参数传递
        function fn(a, b, callback) {
            console.log(a + b);
            callback && callback();
        }
        fn(1, 2, function() {
            console.log('我是最后调用的');

        });
        
        
        $("div").animate({
            left: 500
        }, function() {
            $("div").css("backgroundColor", "purple");
        })

    </script>
</body>
将函数作为返回值
<script>
    function fn(){
        return function() {}
    }
</script>
此时 fn 就是一个高阶函数
函数也是一种数据类型，同样可以作为参数，传递给另外一个参数使用。最典型的就是作为回调函数
同理函数也可以作为返回值传递回来
4、闭包
4.1、变量作用域
变量根据作用域的不同分为两种：全局变量和局部变量
函数内部可以使用全局变量
函数外部不可以使用局部变量
当函数执行完毕，本作用域内的局部变量会销毁。
4.2、什么是闭包
闭包指有权访问另一个函数作用域中的变量的函数
简单理解：一个作用域可以访问另外一个函数内部的局部变量
<body>
    <script>
        // 闭包（closure）指有权访问另一个函数作用域中变量的函数。
        // 闭包: 我们fn2 这个函数作用域 访问了另外一个函数 fn1 里面的局部变量 num
        function fn1() {		// fn1就是闭包函数
            var num = 10;
            function fn2() {
                console.log(num); 	//10
            }
            fn2();
        }
        fn1();
    </script>
</body>

4.3、在chrome中调试闭包
1.打开浏览器，按 F12 键启动 chrome 调试工具。
2.设置断点 下面图错了断点在fn（）,就是调用函数的地方。再刷新页面。
3.找到 Scope 选项（Scope 作用域的意思）。
4.当我们重新刷新页面，会进入断点调试，Scope 里面会有两个参数（global 全局作用域、local 局部作用域）。
5.当执行到 fn2() 时，Scope 里面会多一个 Closure 参数（ Closure（fn）） ，这就表明产生了闭包，闭包函数（fn）：被访问的变量所在的函数就是一个闭包函数了。也有人说闭包是一种现象。


4.4、闭包的作用
延伸变量的作用范围（全局作用域下也可以访问内部的局部变量了）
<body>
    <script>
        // 闭包（closure）指有权访问另一个函数作用域中变量的函数。
        // 一个作用域可以访问另外一个函数的局部变量 
        // 我们fn 外面的作用域可以访问fn 内部的局部变量
        // 闭包的主要作用: 延伸了变量的作用范围
        function fn() {
            var num = 10;
            function fun() {
                console.log(num);
            }
            return fun；//注意上面的fun函数没有被调用，直接跳过了
        }
        var f = fn();//把断点设置在在这里，fn()被调用，num被声明赋值为10，跳过function fun() ，return fun给f，然后执行f(),
        //也就是去调用fn()内的fun()，fun()在fn()内，所以可以调用输出num。原本fn调用完局部变量num就要被销毁了，但现在需要等f()
        //也调用完才可以销毁，也就是还有别的函数要调用它，它要等到别的函数调用完才能销毁
        //类似于
        //var f = function fun() {
        //        console.log(num);
        //   }
        f();

//简洁写法：
        function fn() {
            var num = 10;
            return function() {
                console.log(num);
            }
        }
        var f = fn();
        f();
        
         </script>
</body>
4.5、闭包练习
4.5.1、点击li输出索引号
<body>
    <ul class="nav">
        <li>榴莲</li>
        <li>臭豆腐</li>
        <li>鲱鱼罐头</li>
        <li>大猪蹄子</li>
    </ul>
    <script>
        // 闭包应用-点击li输出当前li的索引号
        // 1. 我们可以利用动态添加属性的方式(原来方法)
         var lis = document.querySelector('.nav').querySelectorAll('li');
        for (var i = 0; i < lis.length; i++) {
            lis[i].onclick = function() {//这个function是一个异步任务，点击了li以后才会执行，for循环是一个同步任务会立即执行
                console.log(i);//只能输出循环以后的4
            }
            
        for (var i = 0; i < lis.length; i++) {
            lis[i].index = i;//添加一个index属性
            lis[i].onclick = function() {//这个function是一个异步任务，点击了li以后才会执行，for循环是一个同步任务会立即执行
                // console.log(i);//只能输出循环以后的4
                console.log(this.index);

            }
        }
        // 2. 利用闭包的方式得到当前小li 的索引号[经典面试题]
        for (var i = 0; i < lis.length; i++) {
            // 利用for循环创建了4个立即执行函数(创建了4个立即执行函数的作用域，每个作用域的变量相互独立不受干扰，每个作用域分别传入i=0 1 2 3，各不干扰)
            // 立即执行函数就是一个小闭包因为立即执行函数里面的任何一个函数都可以使用它的i这变量
            (function(i) {
                // console.log(i);//0 1 2 3
                lis[i].onclick = function() {//这个function使用了另一个function里的i；
                    console.log(i);()

                }
            })(i);//立即执行函数(function())()；在后面那个()是用来调用后立即执行函数的，可以传参，i分别等于0 1 2 3传入
        }
    </script>
</body>



4.5.2、定时器中的闭包
<body>
    <ul class="nav">
        <li>榴莲</li>
        <li>臭豆腐</li>
        <li>鲱鱼罐头</li>
        <li>大猪蹄子</li>
    </ul>
    <script>
        // 闭包应用-3秒钟之后,打印所有li元素的内容
        var lis = document.querySelector('.nav').querySelectorAll('li');
        for (var i = 0; i < lis.length; i++) {
            (function(i) {
                setTimeout(function() {
                    console.log(lis[i].innerHTML);
                }, 3000)
            })(i);
        }
    </script>
</body>


闭包常与异步任务同时使用
4.5.3、闭包应用-计算打车价格
<script>
        // 闭包应用-计算打车价格 
        // 打车起步价13(3公里内),  之后每多一公里增加 5块钱.  用户输入公里数就可以计算打车价格
        // 如果有拥堵情况,总价格多收取10块钱拥堵费
        // function fn() {};
        // fn();
        //从var car这里开始运行，立即执行函数返回两个函数组成的对象，赋值给car
        //闭包函数是立即执行函数，因为price和yd里的函数会调用立即执行函数里的start和total变量！
        var car = (function() {
            var start = 13; // 起步价  局部变量
            var total = 0; // 总价  局部变量
            return {
                // 正常的总价
                price: function(n) {
                    if (n <= 3) {
                        total = start;
                    } else {
                        total = start + (n - 3) * 5
                    }
                    return total;
                },
                // 拥堵之后的费用
                yd: function(flag) {
                    return flag ? total + 10 : total;
                }
            }
        })();
        console.log(car.price(5)); // 23
        console.log(car.yd(true)); // 33

        console.log(car.price(1)); // 13
        console.log(car.yd(false)); // 13
    </script>
ps：全局变量在局部域内被改变，则在全局范围内也随之改变，即全局范围内的其他局部域里的该全局变量也同步改变；start和total不是全局变量但可以类比。
思考题：
<script>
       ？ // 思考题 1：

        var name = "The Window";
        var object = {
            name: "My Object",
            getNameFunc: function() {
                return function() {
                    return this.name;
                };
            }
        };

        console.log(object.getNameFunc()())//The Window  
       //等价于
        var f = object.getNameFunc();
 
         // 类似于      
        var f = function() {
            return this.name;
        }
        f();
        //没有闭包
        //最后一步等价于 function(){this}()类似于立即执行函数，this指向window；还有一种说法(弹幕)全局作用域函数形式调用this指向window

        // 思考题 2：

        // var name = "The Window";　　
        // var object = {　　　　
        //     name: "My Object",
        //     getNameFunc: function() {
        //         var that = this;
        //         return function() {
        //             return that.name;
        //         };
        //     }
        // };
        // console.log(object.getNameFunc()())//My Object
        //等价于
        //var f = object.getNameFunc();
        //var f = function() {
        //             return that.name;
        //         };
        //f();
        //有闭包产生
                
    </script>
    
4.6、闭包总结
1.闭包是什么？
闭包是一个函数 （一个作用域可以访问另外一个函数的局部变量），被访问变量的函数就是闭包函数
2. 闭包的作用是什么？
延伸变量的作用范围
5、递归
如果一个函数在内部可以调用其本身，那么这个函数就是递归函数
简单理解： 函数内部自己调用自己，这个函数就是递归函数（很像for循环）
由于递归很容易发生"栈溢出"错误，所以必须要加退出条件 return
<body>
    <script>
        // 递归函数 : 函数内部自己调用自己, 这个函数就是递归函数
        var num = 1;

        function fn() {
            console.log('我要打印6句话');

            if (num == 6) {
                return; // 递归里面必须加退出条件
            }
            num++;
            fn();
        }
        fn();
    </script>
</body>

5.2、利用递归求数学题
 <script>
        // 利用递归函数求1~n的阶乘 1 * 2 * 3 * 4 * ..n
        function fn(n) {//1
            if (n == 1) {//3
                return 1;
            }
            return n * fn(n - 1);//2
        }
        console.log(fn(3));
        console.log(fn(4));
        // 详细思路 假如用户输入的是3
        //return  3 * fn(2)
        //return  3 * (2 * fn(1))
        //return  3 * (2 * 1)
        //return  3 * (2)
        //return  6
         
          
           // 利用递归函数求斐波那契数列(兔子序列)  1、1、2、3、5、8、13、21...
        // 用户输入一个数字 n 就可以求出 这个数字对应的兔子序列值
        // 我们只需要知道用户输入的n 的前面两项(n-1 n-2)就可以计算出n 对应的序列值
        function fb(n) {//1
            if (n === 1 || n === 2) {//3
                return 1;
            }
            return fb(n - 1) + fb(n - 2);//2
        }
        console.log(fb(3));
        console.log(fb(6));                 
    </script>
//利用递归遍历数据(根据id返回对应的数据对象)
<script>
        var data = [{
            id: 1,
            name: '家电',
            goods: [{
                id: 11,
                gname: '冰箱',
                goods: [{
                    id: 111,
                    gname: '海尔'
                }, {
                    id: 112,
                    gname: '美的'
                }, ]
            }, {
                id: 12,
                gname: '洗衣机'
            }]
        }, {
            id: 2,
            name: '服饰'
        }];
        // 我们想要做输入id号,就可以返回的数据对象
        // 1. 利用 forEach 去遍历里面的每一个对象
        function getID(json, id) {//1
            var o = {};//5
            json.forEach(function(item) {//2
                // console.log(item); // 2个数组元素
                if (item.id == id) {//3
                    // console.log(item);
                    o = item;//6
                    // 2. 我们想要得里层的数据 11 12 可以利用递归函数，递归结束条件是：当forEach循环结束仍没有if匹配元素时结束，
                    //或者if条件被匹配到了结束
                    // 里面应该有goods这个数组并且数组的长度不为 0 
                } else if (item.goods && item.goods.length > 0) {//4
                    o = getID(item.goods, id);//7
                }

            });
            return o;
        }
        //getID(data, 1);//1
        //getID(data, 11);
        console.log(getID(data, 1));//6
        console.log(getID(data, 2));
        console.log(getID(data, 11));
        console.log(getID(data, 12));
        console.log(getID(data, 111));
    </script>
6、浅拷贝和深拷贝
浅拷贝只是拷贝一层，更深层次对象级别的只拷贝引用，（只拷贝地址，指向的都是一个东西，改变一个另外一个会跟着改变）
深拷贝拷贝多层，每一级别的数据都会拷贝
Object.assign(target,....sources) ES6新增方法可以浅拷贝
去看jQuery里的浅拷贝和深拷贝
6.1、浅拷贝
// 浅拷贝只是拷贝一层，更深层次对象级别的只拷贝引用
var obj = {
    id: 1,
    name: 'andy',
    msg: {
        age: 18
    }
};
var o = {}
for(var k in obj){
    // k是属性名，obj[k]是属性值
    o[k] = obj.[k];
}
console.log(o);
// 浅拷贝语法糖(ES6)
Object.assign(o,obj);
6.2、深拷贝
// 深拷贝拷贝多层，每一级别的数据都会拷贝，会重新开辟空间
var obj = {
    id: 1,
    name: 'andy',
    msg: {
        age: 18
    }
    color: ['pink','red']
};
var o = {};
// 封装函数
function deepCopy(newobj,oldobj){
    for(var k in oldobj){
        // 判断属性值属于简单数据类型还是复杂数据类型
        // 1.获取属性值   oldobj[k]
        var item = obldobj[k];
        // 2.判断这个值是否是数组，数组也属于object，如果把object放在上面，数组也按object执行了
        if(item instanceof Array){
            newobj[k] = [];
            deepCopy(newobj[k],item)
        }else if (item instanceof Object){
              // 3.判断这个值是否是对象
            newobj[k] = {};
            deepCopy(newobj[k],item)
        }else {
            // 4.属于简单数据类型
            newobj[k] = item;
            
        } 
    }
}
deepCopy(o,obj);

7、 正则表达式
正则表达式（ Regular Expression ）是用于匹配字符串中字符组合的模式。在JavaScript中，正则表达式也是对象。
正则表通常被用来检索、替换那些符合某个模式（规则）的文本，例如验证表单：用户名表单只能输入英文字母、数字或者下划线， 昵称输入框中可以输入中文(匹配)。此外，正则表达式还常用于过滤掉页面内容中的一些敏感词(替换)，或从字符串中获取我们想要的特定部分(提取)等 。
7.1、特点
灵活性、逻辑性和功能性非常的强。
可以迅速地用极简单的方式达到字符串的复杂控制。
对于刚接触的人来说，比较晦涩难懂。比如： ^\w+([-+.]\w+)@\w+([-.]\w+).\w+([-.]\w+)*$
实际开发,一般都是直接复制写好的正则表达式. 但是要求会使用正则表达式并且根据实际情况修改正则表达式.   比如用户名:    /^[a-z0-9_-]{3,16}$/
7.2、创建正则表达式
在JavaScript中，可以通过两种方式创建正则表达式
 通过调用 RegExp 对象的构造函数创建 
 通过字面量创建 
7.2.1、通过调用 RegExp 对象的构造函数创建
通过调用 RegExp 对象的构造函数创建
var 变量名 = new RegExp(/表达式/);
7.2.2、通过字面量创建
通过字面量创建
var 变量名 = /表达式/;
注释//中间放表达式就是正则字面量
7.2.3、测试正则表达式 test
test()正则对象方法，用于检测字符串是否符合正则表达式的规则，该对象会返回true或false,其参数是测试字符串
regexObj.test(str)
regexObj 写的是正则表达式
str 我们要测试的文本
就是检测str文本是否符合我们写的正则表达式规范
示例
<body>
    <script>
        // 正则表达式在js中的使用

        // 1. 利用 RegExp对象来创建 正则表达式
        var regexp = new RegExp(/123/);
        console.log(regexp);/123/

        // 2. 利用字面量创建 正则表达式
        var rg = /123/;
        // 3.test 方法用来检测字符串是否符合正则表达式要求的规范
        console.log(rg.test(123));//true
        console.log(rg.test('abc'));//false
    </script>
</body>

7.3、正则表达式中的特殊在字符
正则表达式的组成
一个正则表达式可以由简单的字符构成，比如 /abc/，也可以是简单和特殊字符的组合，比如 /ab*c/ 。其中特殊字符也被称为元字符，在正则表达式中是具有特殊意义的专用符号，如 ^ 、$ 、+ 等。

特殊字符非常多，可以参考：
MDN：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions
jQuery 手册：正则表达式部分
正则测试工具: http://tool.oschina.net/regex

这里我们把元字符划分几类学习 。
7.3.1、边界符
正则表达式中的边界符(位置符)用来提示字符所处的位置，主要有两个字符
边界符说明^表示匹配行首的文本(以谁开始)$表示匹配行尾的文本(以谁结束)
如果^ 和 $ 在一起，表示必须是精确匹配
// 边界符 ^ $
var rg = /abc/;   //正则表达式里面不需要加引号，不管是数字型还是字符串型
// /abc/只要包含有abc这个字符串返回的都是true
console.log(rg.test('abc'));
console.log(rg.test('abcd'));
console.log(rg.test('aabcd'));

var reg = /^abc/;//必须以abc开头
console.log(reg.test('abc'));   //true
console.log(reg.test('abcd'));	// true
console.log(reg.test('aabcd')); // false

var reg1 = /^abc$/
// 以abc开头，以abc结尾，必须是abc
7.3.2、字符类
字符类表示有一系列字符可供选择，只要匹配其中一个就可以了
所有可供选择的字符都放在方括号内
①[] 方括号
//var rg = /abc/;  只要包含abc就可以 
        // 字符类: [] 表示有一系列字符可供选择，只要匹配其中一个就可以了,即后面的字符串只要包含 abc 中任意一个字符,都返回true        
        var rg = /[abc]/; // 只要包含有a 或者 包含有b 或者包含有c 都返回为true
        console.log(rg.test('andy'));
        console.log(rg.test('baby'));
        console.log(rg.test('color'));
        console.log(rg.test('red'));//false
        
        
        var rg1 = /^[abc]$/; // 三选一 只有是a 或者是 b  或者是c 这三个字母才返回 true
        console.log(rg1.test('aa'));//false
        console.log(rg1.test('a'));
        console.log(rg1.test('b'));
        console.log(rg1.test('c'));
        console.log(rg1.test('abc'));//false


②[-]方括号内部 范围符
var reg = /^[a-z]$/; // 26个英文字母任何一个字母返回 true  - 表示的是a 到z 的范围  ,只能输入一个！
        console.log(reg.test('a'));
        console.log(reg.test('z'));
        console.log(reg.test(1));//false
        console.log(reg.test('A'));//false
方括号内部加上 - 表示范围，这里表示 a - z 26个英文字母都可以
④字符组合
/[a-z1-9]/.test('andy')    // true 方括号内部可以使用字符组合，这里表示包含 a 到 z的26个英文字母和1到9的数字都可以
// 字符组合
        var reg1 = /^[a-zA-Z0-9_-]$/; // 26个英文字母(大写和小写都可以)任何一个字母以及0-9和_-当中任何一个都返回 true ，只能输入一个！ 
        console.log(reg1.test('a'));
        console.log(reg1.test('B'));
        console.log(reg1.test(8));
        console.log(reg1.test('-'));
        console.log(reg1.test('_'));
        console.log(reg1.test('!'));//false

③[^] 方括号内部 取反符 ^
// 如果中括号里面有^ 表示取反的意思 千万和 我们边界符 ^ 别混淆
        var reg2 = /^[^a-zA-Z0-9_-]$/;
        console.log(reg2.test('a'));
        console.log(reg2.test('B'));
        console.log(reg2.test(8));
        console.log(reg2.test('-'));
        console.log(reg2.test('_'));
        console.log(reg2.test('!'));//true
方括号内部加上 ^ 表示取反，只要包含方括号内的字符，都返回 false
注意和边界符 ^ 区别，边界符写到方括号外面

<body>
    <script>
        //var rg = /abc/;  只要包含abc就可以 
        // 字符类: [] 表示有一系列字符可供选择，只要匹配其中一个就可以了
        var rg = /[abc]/; // 只要包含有a 或者 包含有b 或者包含有c 都返回为true
        console.log(rg.test('andy'));
        console.log(rg.test('baby'));
        console.log(rg.test('color'));
        console.log(rg.test('red'));
        var rg1 = /^[abc]$/; // 三选一 只有是a 或者是 b  或者是c 这三个字母才返回 true
        console.log(rg1.test('aa'));
        console.log(rg1.test('a'));
        console.log(rg1.test('b'));
        console.log(rg1.test('c'));
        console.log(rg1.test('abc'));
        console.log('------------------');

        var reg = /^[a-z]$/; // 26个英文字母任何一个字母返回 true  - 表示的是a 到z 的范围  
        console.log(reg.test('a'));
        console.log(reg.test('z'));
        console.log(reg.test(1));
        console.log(reg.test('A'));
        // 字符组合
        var reg1 = /^[a-zA-Z0-9_-]$/; // 26个英文字母(大写和小写都可以)任何一个字母返回 true  
        console.log(reg1.test('a'));
        console.log(reg1.test('B'));
        console.log(reg1.test(8));
        console.log(reg1.test('-'));
        console.log(reg1.test('_'));
        console.log(reg1.test('!'));
        console.log('----------------');
        // 如果中括号里面有^ 表示取反的意思 千万和 我们边界符 ^ 别混淆
        var reg2 = /^[^a-zA-Z0-9_-]$/;
        console.log(reg2.test('a'));
        console.log(reg2.test('B'));
        console.log(reg2.test(8));
        console.log(reg2.test('-'));
        console.log(reg2.test('_'));
        console.log(reg2.test('!'));
    </script>
</body>

7.3.3、量词符
量词符用来设定某个模式出现的次数
量词说明*重复零次或更多次+重复一次或更多次?重复零次或一次{n}重复n次{n,}重复n次或更多次{n,m}重复n到m次
<body>
    <script>
        // 量词符: 用来设定某个模式出现的次数
        // 简单理解: 就是让下面的a这个字符重复多少次
        // var reg = /^a$/;


        //  * 相当于 >= 0 可以出现0次或者很多次 
        // var reg = /^a*$/;
        // console.log(reg.test(''));
        // console.log(reg.test('a'));
        // console.log(reg.test('aaaa'));



        //  + 相当于 >= 1 可以出现1次或者很多次
        // var reg = /^a+$/;
        // console.log(reg.test('')); // false
        // console.log(reg.test('a')); // true
        // console.log(reg.test('aaaa')); // true

        //  ?  相当于 1 || 0
        // var reg = /^a?$/;
        // console.log(reg.test('')); // true
        // console.log(reg.test('a')); // true
        // console.log(reg.test('aaaa')); // false

        //  {3 } 就是重复3次
        // var reg = /^a{3}$/;
        // console.log(reg.test('')); // false
        // console.log(reg.test('a')); // false
        // console.log(reg.test('aaaa')); // false
        // console.log(reg.test('aaa')); // true
        //  {3, }  大于等于3
        var reg = /^a{3,}$/;
        console.log(reg.test('')); // false
        console.log(reg.test('a')); // false
        console.log(reg.test('aaaa')); // true
        console.log(reg.test('aaa')); // true
        //  {3,6}  大于等于3 并且 小于等于6
        var reg = /^a{3,6}$/;
        console.log(reg.test('')); // false
        console.log(reg.test('a')); // false
        console.log(reg.test('aaaa')); // true
        console.log(reg.test('aaa')); // true
        console.log(reg.test('aaaaaaa')); // false
    </script>
</body>

7.3.4、用户名验证
功能需求：
1.如果用户名输入合法, 则后面提示信息为 : 用户名合法,并且颜色为绿色
2.如果用户名输入不合法, 则后面提示信息为: 用户名不符合规范, 并且颜色为红色
分析：
1.用户名只能为英文字母,数字,下划线或者短横线组成, 并且用户名长度为 6~16位.
2.首先准备好这种正则表达式模式 /$[a-zA-Z0-9-_]{6,16}^/
3.当表单失去焦点就开始验证.
4.如果符合正则规范, 则让后面的span标签添加 right 类.
5.如果不符合正则规范, 则让后面的span标签添加 wrong 类.
<body>
    <input type="text" class="uname"> <span>请输入用户名</span>
    <script>
        //var reg = /^[a-zA-Z0-9_-]$/;这个模式用户只能输入英文字母 数字 下划线 短横线 但只能输入一个才正确
        // console.log(reg.test('a'));
        // console.log(reg.test('8'));
        // console.log(reg.test('18')); // false
        // console.log(reg.test('aa')); // false
        
        //  量词是设定某个模式出现的次数
        var reg = /^[a-zA-Z0-9_-]{6,16}$/; // 这个模式用户只能输入英文字母 数字 下划线 短横线但是有边界符和[] 这就限定了只能多选1
        //可以输入6到16次之间
        // {6,16}  中间不要有空格
        // console.log(reg.test('a'));
        // console.log(reg.test('8'));
        // console.log(reg.test('18'));
        // console.log(reg.test('aa'));
        // console.log('-------------');
        // console.log(reg.test('andy-red'));
        // console.log(reg.test('andy_red'));
        // console.log(reg.test('andy007'));
        // console.log(reg.test('andy!007'));//false
        var uname = document.querySelector('.uname');
        var span = document.querySelector('span');
        uname.onblur = function() {
            if (reg.test(this.value)) {
                console.log('正确的');
                span.className = 'right';
                span.innerHTML = '用户名格式输入正确';
            } else {
                console.log('错误的');
                span.className = 'wrong';
                span.innerHTML = '用户名格式输入不正确';
            }
        }
    </script>
</body>

7.4、括号总结
大括号 量词符 里面面表示重复次数
中括号 字符集合 匹配方括号中的任意字符
小括号 表示优先级
// 中括号 字符集合 匹配方括号中的任意一个字符
var reg = /^[abc]$/;
// a || b || c
// 大括号 量词符 里面表示重复次数
var reg = /^abc{3}$/;   // 它只是让c 重复3次 要输入abccc
// 小括号 表示优先级
var reg = /^(abc){3}$/;  //它是让 abc 重复3次 abcabcabc
在线测试正则表达式：https://c.runoob.com/
测试时输入正则表达式不用再加//了
7.5、预定义类
预定义类指的是 某些常见模式的简写写法


7.5.1、表单验证
分析：
1.手机号码: /^1[3|4|5|7|8][0-9]{9}$/
2.QQ: [1-9][0-9]{4,} (腾讯QQ号从10000开始)
3.昵称是中文: ^[\u4e00-\u9fa5]{2,8}$   （\u4e00-\u9fa5代表第一个汉字到最后一个汉字）
<body>
    <script>
        // 座机号码验证:  全国座机号码  两种格式:   010-12345678  或者  0530-1234567
        // 正则里面的或者 符号  |  
        // var reg = /^\d{3}-\d{8}|\d{4}-\d{7}$/;
        var reg = /^\d{3,4}-\d{7,8}$/;//这个不严谨
    </script>
</body>



//表单验证案例：js文件
window.onload = function() {
    var regtel = /^1[3|4|5|7|8]\d{9}$/; // 手机号码的正则表达式
    var regqq = /^[1-9]\d{4,}$/; // 10000 qq号码
    var regnc = /^[\u4e00-\u9fa5]{2,8}$/;//昵称
    var regmsg = /^\d{6}$/;//短信验证
    var regpwd = /^[a-zA-Z0-9_-]{6,16}$/;//密码框
    var tel = document.querySelector('#tel');
    var qq = document.querySelector('#qq');
    var nc = document.querySelector('#nc');
    var msg = document.querySelector('#msg');
    var pwd = document.querySelector('#pwd');
    var surepwd = document.querySelector('#surepwd');
    regexp(tel, regtel); // 手机号码
    regexp(qq, regqq); // qq号码
    regexp(nc, regnc); // 昵称
    regexp(msg, regmsg); // 短信验证
    regexp(pwd, regpwd); // 密码框
    // 表单验证的函数
    function regexp(ele, reg) {
        ele.onblur = function() {
            if (reg.test(this.value)) {
                // console.log('正确的');
                this.nextElementSibling.className = 'success';
                this.nextElementSibling.innerHTML = '<i class="success_icon"></i> 恭喜您输入正确';
            } else {
                // console.log('不正确');
                this.nextElementSibling.className = 'error';
                this.nextElementSibling.innerHTML = '<i class="error_icon"></i> 格式不正确，请从新输入 ';
            }
        }
    };

    surepwd.onblur = function() {
        if (this.value == pwd.value) {
            this.nextElementSibling.className = 'success';
            this.nextElementSibling.innerHTML = '<i class="success_icon"></i> 恭喜您输入正确';
        } else {
            this.nextElementSibling.className = 'error';
            this.nextElementSibling.innerHTML = '<i class="error_icon"></i> 两次密码输入不一致';

        }
    }

}
7.6、正则表达式中的替换
7.6.1、replace 替换
replace()方法可以实现替换字符串操作，用来替换的参数可以是一个字符串或是一个正则表达式
stringObject.replace(regexp/substr,replacement)
第一个参数: 被替换的字符串或者正则表达式
第二个参数：替换为的字符串
返回值是一个替换完毕的新字符串，但是replace只能替换第一个要被替换的词，后面再出现这个词不会被替换
// 替换 replace
var str = 'andy和red';
var newStr = str.replace('andy','baby');//baby和red
var newStr = str.replace(/andy/,'baby');//baby和red

案例：点击提交按钮，获取文本框里所有的留言，把留言中的敏感词过滤掉
<textarea name="" id="message"></textarea> <button>提交</button>
    <div></div>
    <script>
        // 替换 replace
        // var str = 'andy和red';
        // // var newStr = str.replace('andy', 'baby');
        // var newStr = str.replace(/andy/, 'baby');
        // console.log(newStr);
        var text = document.querySelector('textarea');
        var btn = document.querySelector('button');
        var div = document.querySelector('div');
        btn.onclick = function() {
            div.innerHTML = text.value.replace(/激情|gay/g, '**');//g: 全局匹配  把敏感词 激情、gay都替换掉了
        }
    </script>
7.6.2、正则表达式参数
/表达式/[switch]
switch按照什么样的模式来匹配，有三种
g: 全局匹配
i:忽略大小写
gi: 全局匹配 + 忽略大小写
