0.jQuery事件
10.1jQuery事件注册
10.1.1jQuery事件注册
单个事件注册：
element.事件(function(){})
$("div").click(function(){
    事件处理程序
})
其他事件和原生基本一致。
比如mouseover、mouseout、blur、focus、change、keydown、keyup、resize、scroll等
$(function() {
            // 1. 单个事件注册
             $("div").click(function() {
                 $(this).css("background", "purple");
             });
             $("div").mouseenter(function() {
                 $(this).css("background", "skyblue");
             });
            }
10.2事件处理
10.2.1事件处理on（）绑定事件
on（）方法在匹配元素上绑定一个或者多个事件的事件处理函数
element.on(events,[selector],fn)
events:一个或多个用空格分隔的事件类型，如"click"或"keydown" 。
selector:[元素的子元素选择器]一个选择器字符串用于过滤器的触发事件的选择器元素的后代。如果选择的< null或省略，当它到达选定的元素，事件总是触发。
fn:该事件被触发时执行的函数。 false 值也可以做一个函数的简写，返回false。
优势：
1.一个对象可以一次绑定多个事件
2.可以事件委派操作。事件委派就是把原来加给子元素身上的事件绑定在父元素身上，就是把事件委派给父元素，这样只给一个元素绑定事件，大大提高程序效率
   在此之前有bind（）、live（）、delegate（）等方法来处理事件绑定或者事件委派，最新版本请用on代替他们
3. on可以给未来动态创建的元素绑定事件，单个事件绑定不可以
<body>
    <div></div>
    <ul>
        <li>我们都是好孩子</li>
        <li>我们都是好孩子</li>
        <li>我们都是好孩子</li>
        <li>我们都是好孩子</li>
        <li>我们都是好孩子</li>
    </ul>
    <ol>

    </ol>
    <script>
// 2. 事件处理on
            // (1) on可以绑定1个或者多个事件处理程序
            //on里可以传一个对象格式存多个事件
            // $("div").on({
            //     mouseenter: function() {
            //         $(this).css("background", "skyblue");
            //     },
            //     click: function() {
            //         $(this).css("background", "purple");
            //     },
            //     mouseleave: function() {
            //         $(this).css("background", "blue");
            //     }
            // });
            //如果多个事件的事件处理程序一致，可以简写
            $("div").on("mouseenter mouseleave", function() {
                $(this).toggleClass("current");
            });
             // (2) on可以实现事件委托（委派）
            // $("ul li").click();这样因为隐式迭代会给ul里的每一个li都绑定点击事件
            $("ul").on("click", "li", function() {
                alert(11);
            });
            // click 是绑定在ul 身上的，但是 触发的对象是 ul 里面的小li，点击li事件冒泡会冒到父亲身上，父亲身上有这个点击事件，然后触发程序
            // (3) on可以给未来动态创建的元素绑定事件
            // $("ol li").click(function() {
            //     alert(11);
            // })
            //var li = $("<li>我是后来创建的</li>");
            //$("ol").append(li);  这样是不行的！单个事件注册之后才创建了li，单个事件注册不可以给未来动态创建的元素绑定事件
            $("ol").on("click", "li", function() {
                alert(11);
            })
            var li = $("<li>我是后来创建的</li>");
            $("ol").append(li);
        })
案例：微博发布效果

1.点击发布按钮，动态创建一个小li，放入文本框内容和删除按钮，并且添加到ul中
2.点击删除按钮，可以删除当前微博留言
<style>
        * {
            margin: 0;
            padding: 0
        }
        
        ul {
            list-style: none
        }
        
        .box {
            width: 600px;
            margin: 100px auto;
            border: 1px solid #000;
            padding: 20px;
        }
        
        textarea {
            width: 450px;
            height: 160px;
            outline: none;
            resize: none;
        }
        
        ul {
            width: 450px;
            padding-left: 80px;
        }
        
        ul li {
            line-height: 25px;
            border-bottom: 1px dashed #cccccc;
            display: none;
        }
        
        input {
            float: right;
        }
        
        ul li a {
            float: right;
        }
    </style>
    <script src="jquery.min.js"></script>
    <script>
        $(function() {
            // 1.点击发布按钮， 动态创建一个小li，放入文本框的内容和删除按钮， 并且添加到ul 中
            $(".btn").on("click", function() {
                var li = $("<li></li>");
                li.html($(".txt").val() + "<a href='javascript:;'> 删除</a>");
                $("ul").prepend(li);
                li.slideDown();
                $(".txt").val("");
            })

            // 2.点击的删除按钮，可以删除当前的微博留言li
            // $("ul a").click(function() {  // 此时的click不能给动态创建的a添加事件
            //     alert(11);
            // })
            // on可以给动态创建的元素绑定事件
            $("ul").on("click", "a", function() {
                $(this).parent().slideUp(function() {
                    $(this).remove();
                });
            })

        })
    </script>
</head>

<body>
    <div class="box" id="weibo">
        <span>微博发布</span>
        <textarea name="" class="txt" cols="30" rows="10"></textarea>
        <button class="btn">发布</button>
        <ul>
        </ul>
    </div>
</body>
10.2.3事件处理off()解绑事件
off（）方法可以移除通过on（）方法添加的事件处理程序。
one() 但是它只能触发事件一次
 <script src="jquery.min.js"></script>
    <script>
        $(function() {
            $("div").on({
                click: function() {
                    console.log("我点击了");
                },
                mouseover: function() {
                    console.log('我鼠标经过了');
                }
            });
            $("ul").on("click", "li", function() {
                alert(11);
            });
            // 1. 事件解绑 off 
            // $("div").off();  // 这个是解除了div身上的所有事件
            $("div").off("click"); // 这个是解除了div身上的点击事件
            $("ul").off("click", "li");//解除事件委托
            // 2. one() 但是它只能触发事件一次
            $("p").one("click", function() {
                alert(11);
            })
        })
    </script>
</head>

<body>
    <div></div>
    <ul>
        <li>我们都是好孩子</li>
        <li>我们都是好孩子</li>
        <li>我们都是好孩子</li>
    </ul>
    <p>我是屁</p>
</body>
10.2.4自动触发事件trigger()
有些事件希望自动触发，比如轮播图自动播放功能跟点击右侧按钮一致。可以利用定时器自动触发右侧按钮点击事件，不必鼠标点击触发。
element.事件()//第一种简写形式 会触发元素的默认行为
element.trigger("type")//第二种自动触发模式  会触发元素的默认行为，比如获得焦点后文本框里会有一个光标在闪烁
element.triggerHandler("type")//第三种自动触发模式  不会触发元素的默认行为

 <script src="jquery.min.js"></script>
    <script>
        $(function() {
            $("div").on("click", function() {
                alert(11);
            });

            // 自动触发事件，不用点击div就直接执行点击事件
            // 1. 元素.事件()
            // $("div").click();会触发元素的默认行为
            // 2. 元素.trigger("事件")
            // $("div").trigger("click");会触发元素的默认行为，比如获得焦点后文本框里会有一个光标在闪烁
            $("input").trigger("focus");
            // 3. 元素.triggerHandler("事件") 就是不会触发元素的默认行为
            $("div").triggerHandler("click");
            $("input").on("focus", function() {
                $(this).val("你好吗");
            });
            // $("input").triggerHandler("focus");

        });
    </script>
</head>

<body>
    <div></div>
    <input type="text">
</body>
10.3jQuery事件对象
只要有事件触发，就会有事件对象的产生,和以前讲的基本一致
element.on(events,[selector],function(event){})//event就是事件对象
阻止默认行为：event.preventDefault（）或者return false
阻止冒泡：event.stopPropagation()
 <style>
        div {
            width: 100px;
            height: 100px;
            background-color: pink;
        }
    </style>
    <script src="jquery.min.js"></script>
    <script>
        $(function() {
            $(document).on("click", function() {
                console.log("点击了document");

            })
            $("div").on("click", function(event) {
                // console.log(event);
                console.log("点击了div");
                event.stopPropagation();//阻止冒泡
            })
        })
    </script>
</head>

<body>
    <div></div>
</body>




11.jQuery对象拷贝（选放）
如果想把某个对象拷贝（合并）给另外一个对象使用，此时可以使用$.extend()方法
$.extend([deep],target,object1,[objectN])
1.deep：如果设为true为深拷贝，默认为false为浅拷贝
2.target：要拷贝的目标对象
3.object1：待拷贝到第一个对象的对象
4.objectN：待拷贝到第N个对象的对象
5.浅拷贝是把被拷贝的对象复杂数据类型中的地址拷贝给目标对象，修改目标对象会影响被拷贝对象，会覆盖待拷贝对象里面原来和被拷贝属性名一样的的数据

6.深拷贝，前面加true，完全克隆（拷贝对象，而不是地址），修改目标对象不会影响被拷贝的对象，不会覆盖待拷贝对象里面原来和被拷贝属性名一样的的数据，直接合并。


             var targetObj = {};
             var obj = {
                 id: 1,
                 name: "andy"
             };
            // $.extend(target, obj);
             $.extend(targetObj, obj);
             console.log(targetObj);//返回一个对象跟obj一样
             
             var targetObj = {
                 id: 0
             };
             var obj = {
                 id: 1,
                 name: "andy"
             };
             // $.extend(target, obj);
             $.extend(targetObj, obj);
             console.log(targetObj); // 会覆盖targetObj 里面原来和obj属性名一样的的数据
            
            var targetObj = {
                id: 0,
                msg: {
                    sex: '男'
                }
            };
            var obj = {
                id: 1,
                name: "andy",
                msg: {
                    age: 18
                }
            };
            // // $.extend(target, obj);
             $.extend(targetObj, obj);
             console.log(targetObj); // 会覆盖targetObj 里面原来和obj属性名一样的数据
             
             // 1. 浅拷贝把原来对象里面的复杂数据类型(比如msg，是一个对象object)地址拷贝给目标对象
             targetObj.msg.age = 20;
             console.log(targetObj);
             console.log(obj);//obj里的msg属性的age属性也变成了20
            // 2. 深拷贝把里面的数据完全复制一份给目标对象 如果里面有不冲突的属性,会合并到一起 
            $.extend(true, targetObj, obj);
  
            console.log(targetObj); // msg :{sex: "男", age: 18}          
            targetObj.msg.age = 20;
            console.log(targetObj); // msg :{sex: "男", age: 20}
            console.log(obj);//msg :{sex: "男", age: 18}




        })
12.多库共存
jQuery使用$作为标识符，随着jQuery的流行，其他js库也会用这$作为标识符，这样一起使用会引起冲突
多库共存：让jQuery和其他的js库不存在冲突，可以同时存在
解决方案：
1.把里面的$符号统一改为jQuery。比如jQuery（“div”）
2.jQuery变量规定新的名称：$.noConflict()       var xx =  $.noConflict();
   让jquery 释放对$ 控制权 让用自己决定
<script>
        $(function() {
        //自己写的代码里用了$作为函数名，与jQuery的$冲突了
            function $(ele) {
                return document.querySelector(ele);
            }
            console.log($("div"));
            // 1. 如果$ 符号冲突 我们就使用 jQuery
            jQuery.each();
            // 2. 让jquery 释放对$ 控制权 让用自己决定
            var suibian = jQuery.noConflict();
            console.log(suibian("span"));
            suibian.each();
        })
    </script>
13.jQuery插件
jQuery功能比较有限，主要来进行一些DOM操作。
注意：jQuery插件也是依赖于jQuery来完成的，所以必须要先引入jQuery文件，因此也称为jQuery插件。
jQuery插件常用的网站：
1.jquery插件库：http://www.jq22.com/
2.jQuery之家（推荐）：http://www.htmleaf.com/

jquery插件演示：
1.瀑布流
2.图片懒加载（图片使用延迟加载在可提高网页加载速度，他也能帮助减轻服务器负载）
   当我们页面滑动到可视区域，再显示图片
   我们使用jquery插件库EasyLazyload。注意，此时的js文件和js调用必须写到DOM元素（图片）最后面
3.全屏滚动（fullpage.js）【没有滚动条】
   gitHub:https://github.com/alvarotrigo/fullPage.js
   中文翻译网站：http://www.dowebok.com/demo/2014/77/
bootStrap：
bootStrap 框架也是依赖于jquery开发的，因此里面的js插件使用，也必须引用jquery文件
bootStrap 组件和插件

todolist案例
<script>
        var todolist = [{
            title: '我今天吃八个馒头',
            done: false
        }, {
            title: '我今天学习jq',
            done: false
        }, ];
        // localStorage.setItem("todo", todolist);
        // 1. 本地存储里面只能存储字符串的数据格式 把我们的数组对象转换为字符串格式 JSON.stringify()
        localStorage.setItem("todo", JSON.stringify(todolist));
        var data = localStorage.getItem("todo");
        // console.log(typeof data);
        // console.log(data[0].title);
        // 2. 获取本地存储的数据 我们需要把里面的字符串数据转换为 对象格式 JSON.parse()，因为字符串没有方法属性
        data = JSON.parse(data);
        console.log(data);
        console.log(data[0].title);
    </script>
1.把数组对象转换为JSON字符串格式 JSON.stringify()
2.把字符串数据转换为对象格式 JSON.parse()
<body>
    <div>
        <a href="#">1</a>
        <a href="#">2</a>
        <a href="#">3</a>
    </div>
    <ul>
        <li><a href="#">a</a></li>
        <li><a href="#">b</a></li>
        <li><a href="#">c</a></li>
    </ul>
    <script>
        $("div a").click(function() {
            console.log($(this).index());
        })
        $("ul a").click(function() {
            console.log($(this).index());
        })
    </script>
</body>
只有亲兄弟index（）才能返回正常索引号


删除数组中某个元素 splice(从哪个位置开始删除, 删除几个元素)
<body>
    <script>
        var arr = ['a', 'b', 'c'];
        // 删除b元素  splice(从哪个位置开始删除, 删除几个元素)
        arr.splice(1, 1);
        console.log(arr);
    </script>
</body>


