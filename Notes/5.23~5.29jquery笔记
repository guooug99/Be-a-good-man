4.样式操作
4.1操作css方法
jQuery可以通过使用css方法来修改简单元素样式，也可以操作类，修改多个样式

1.参数只写属性名，则是返回属性值,不是修改
$(this).css("color");
2.参数是属性名，属性值，逗号分割，是设置一组样式，属性必须加引号，值如果是数字可以不用加单位和引号
3.参数可以是对象形式，方便设置多组样式。属性名和属性值用冒号隔开，属性可以不用加引号。
<div></div>
    <script>
        // 操作样式之css方法
        $(function() {
            console.log($("div").css("width"));
            // $("div").css("width", "300px");
            // $("div").css("width", 300);
            // $("div").css(height, "300px"); 报错！属性名一定要加引号
            $("div").css({
                width: 400,
                height: 400,
                backgroundColor: "red"
                    // 如果是复合属性则必须采取驼峰命名法！不能按css样式来写，如果值不是数字，则需要加引号
            })
        })
    </script>
4.2设置类样式方法
作用等同与以前的classLIst，可以操作类样式，注意操作类里面的参数不要加点 ；Class记得大写
     
        div {
            width: 150px;
            height: 150px;
            background-color: pink;
            margin: 100px auto;
            transition: all 0.5s;
        }
        
        .now {
            background-color: red;
            transform: rotate(360deg);
        }
    </style>
    
    
    /*1.添加一个类*/
    $('li').addClass('now');
    /*2.删除一个类*/
    $('li').removeClass('now');
    /*3.切换一个类  有就删除没有就添加*/
    $('li').toggleClass('now');
    /*4.匹配一个类  判断是否包含某个类  如果包含返回true否知返回false*/
    $('li').hasClass('now');

案例：tab栏切换案例


 <style
        * {
            margin: 0;
            padding: 0;
        }
        
        li {
            list-style-type: none;
        }
        
        .tab {
            width: 978px;
            margin: 100px auto;
        }
        
        .tab_list {
            height: 39px;
            border: 1px solid #ccc;
            background-color: #f1f1f1;
        }
        
        .tab_list li {
            float: left;
            height: 39px;
            line-height: 39px;
            padding: 0 20px;
            text-align: center;
            cursor: pointer;
        }
        
        .tab_list .current {
            background-color: #c81623;
            color: #fff;
        }
        
        .item_info {
            padding: 20px 0 0 20px;
        }
        
        .item {
            display: none;
        }
    </style>
    <script src="jquery.min.js"></script>
</head>

<body>
    <div class="tab">
        <div class="tab_list">
            <ul>
                <li class="current">商品介绍</li>
                <li>规格与包装</li>
                <li>售后保障</li>
                <li>商品评价（50000）</li>
                <li>手机社区</li>
            </ul>
        </div>
        <div class="tab_con">
            <div class="item" style="display: block;">
                商品介绍模块内容
            </div>
            <div class="item">
                规格与包装模块内容
            </div>
            <div class="item">
                售后保障模块内容
            </div>
            <div class="item">
                商品评价（50000）模块内容
            </div>
            <div class="item">
                手机社区模块内容
            </div>

        </div>
    </div>
    <script>
        $(function() {
            // 1.点击上部的li，当前li 添加current类，其余兄弟移除类
            $(".tab_list li").click(function() {
                // 链式编程操作
                $(this).addClass("current").siblings().removeClass("current");
                // 2.点击的同时，得到当前li 的索引号
                var index = $(this).index();
                console.log(index);
                // 3.让下部里面相应索引号的item显示，其余的item隐藏
                $(".tab_con .item").eq(index).show().siblings().hide();
            });
        })
    </script>
4.3类操作与className区别
原生js中的className会覆盖元素原先里的类名。
jQuery里面的类操作只是对指定类进行操作，不影响原先类名。
 .one {
            width: 200px;
            height: 200px;
            background-color: pink;
            transition: all .3s;
        }
        
        .two {
            transform: rotate(720deg);
        }
    </style>
    <script src="jquery.min.js"></script>
</head>

<body>
    <div class="one two"></div>
    <script>
        // var one = document.querySelector(".one");
        // one.className = "two"; className会覆盖原来的one类名
        // $(".one").addClass("two");  这个addClass相当于追加类名 不影响以前的类名
        $(".one").removeClass("two");
5.jQuery效果
jQuery给我们封装了很多动画效果，最为常见的是：
显示隐藏：show（）hide（）toggle（）
滑动：slideDown（）slideUp（）slideToggle（）
淡入淡出：fadeIn（）fadeOut（）fadeToggle（）fadeTo（）
自定义动画：animate（）
5.1显示隐藏效果
1.显示语法规范
show([speed,[easing],[fn]])
2.显示参数
.参数都可以省略，无动画直接显示
.speed:三种预定速度之一字符串（"slow","nomal","fast"）或者表示动画时长毫秒数值（如：1000）
.easing：（Optional）用来制定切换效果，默认是"swing"（由慢到快）,可用参数"linear"（匀速）
.fn：回调函数，动画完成时执行的函数，每个元素执行一次。

1.隐藏语法规范
hide([speed,[easing],[fn]])
2.隐藏参数
.参数都可以省略，无动画直接显示
.speed:三种预定速度之一字符串（"slow","nomal","fast"）或者表示动画时长毫秒数值（如：1000）
.easing：（Optional）用来制定切换效果，默认是"swing"（由慢到快）,可用参数"linear"（匀速）
.fn：回调函数，动画完成时执行的函数，每个元素执行一次。

1.切换语法规范
toggle([speed,[easing],[fn]])
2.切换参数
.参数都可以省略，无动画直接显示
.speed:三种预定速度之一字符串（"slow","nomal","fast"）或者表示动画时长毫秒数值（如：1000）
.easing：（Optional）用来制定切换效果，默认是"swing"（由慢到快）,可用参数"linear"（匀速）
.fn：回调函数，动画完成时执行的函数，每个元素执行一次。

案例：
    <button>显示</button>
    <button>隐藏</button>
    <button>切换</button>
    <div></div>
    <script>
        $(function() {
            $("button").eq(0).click(function() {
                $("div").show(1000, function() {
                    alert(1);
                });
            })
            $("button").eq(1).click(function() {
                $("div").hide(1000, function() {
                    alert(1);
                });
            })
            $("button").eq(2).click(function() {
                    $("div").toggle(1000);
                })
                // 一般情况下，我们都不加参数直接显示隐藏就可以了
        });
5.2滑动效果
slideDown([s],[e],[fn])
slideUp([s,[e],[fn]])
slideToggle([s],[e],[fn])
语法规范与显示隐藏完全一致
.参数都可以省略，无动画直接显示
.speed:三种预定速度之一字符串（"slow","nomal","fast"）或者表示动画时长毫秒数值（如：1000）
.easing：（Optional）用来制定切换效果，默认是"swing"（由慢到快）,可用参数"linear"（匀速）
.fn：回调函数，动画完成时执行的函数，每个元素执行一次。
    <button>下拉滑动</button>
    <button>上拉滑动</button>
    <button>切换滑动</button>
    <div></div>
    <script>
        $(function() {
            $("button").eq(0).click(function() {
                // 下滑动 slideDown()
                $("div").slideDown();
            })
            $("button").eq(1).click(function() {
                // 上滑动 slideUp()
                $("div").slideUp(500);


            })
            $("button").eq(2).click(function() {
                // 滑动切换 slideToggle()

                $("div").slideToggle(500);

            });

        });
5.3事件切换
 hover([over,]out) 
over:鼠标移到元素上要触发的函数（相当于mouseenter）
out:鼠标移出元素要触发的函数（相当于mouseleave）
如果只写一个函数，那么鼠标经过和鼠标离开都会触发这个函数
案例：简洁版滑动下拉菜单
$(function() {
            // 鼠标经过
            // $(".nav>li").mouseover(function() {
            //     // $(this) jQuery 当前元素  this不要加引号
            //     // show() 显示元素  hide() 隐藏元素
            //     $(this).children("ul").slideDown(200);
            // });
            // // 鼠标离开
            // $(".nav>li").mouseout(function() {
            //     $(this).children("ul").slideUp(200);
            // });
            // 1. 事件切换 hover 就是鼠标经过和离开的复合写法
            // $(".nav>li").hover(function() {
            //     $(this).children("ul").slideDown(200);
            // }, function() {
            //     $(this).children("ul").slideUp(200);
            // });
            // 2. 事件切换 hover  如果只写一个函数，那么鼠标经过和鼠标离开都会触发这个函数，一开始是隐藏的
            $(".nav>li").hover(function() {
                $(this).children("ul").slideToggle();
            });
        })
5.4动画队列及其停止排队的方法
1.动画或效果队列
动画或者效果一旦多次触发，就造成多个动画或者效果排队执行
2.停止排队
stop()
1、stop方法用于停止动画效果
2.注意:stop写到动画或者效果的前面，相当于停止结束上一次的动画
2. 事件切换 hover  如果只写一个函数，那么鼠标经过和鼠标离开都会触发这个函数
            $(".nav>li").hover(function() {
                // stop 方法必须写到动画的前面
                $(this).children("ul").stop().slideToggle();
5.5淡入淡出效果
1、淡入效果语法规范
fadeIn([speed,[easing],[fn]])
.参数都可以省略，无动画直接显示
.speed:三种预定速度之一字符串（"slow","nomal","fast"）或者表示动画时长毫秒数值（如：1000）
.easing：（Optional）用来制定切换效果，默认是"swing"（由慢到快）,可用参数"linear"（匀速）
.fn：回调函数，动画完成时执行的函数，每个元素执行一次。
2、淡出效果
fadeOut([speed,[easing],[fn]])
3、淡入淡出切换效果
fadeToggle([speed,[easing],[fn]])
渐进方式调整到指定的不透明度
fadeTo([[s],opacity,[e],[fn]])
speed:三种预定速度之一的字符串("slow","normal", or "fast")或表示动画时长的毫秒数值(如：1000)
opacity:一个0至1之间表示透明度的数字。
easing:(Optional) 用来指定切换效果，默认是"swing"，可用参数"linear"
fn:在动画完成时执行的函数，每个元素执行一次。
修改透明度 fadeTo() 这个速度和透明度要必须写

案例：
 <button>淡入效果</button>
    <button>淡出效果</button>
    <button>淡入淡出切换</button>
    <button>修改透明度</button>
    <div></div>
    <script>
        $(function() {
            $("button").eq(0).click(function() {
                // 淡入 fadeIn()
                $("div").fadeIn(1000);
            })
            $("button").eq(1).click(function() {
                // 淡出 fadeOut()
                $("div").fadeOut(1000);

            })
            $("button").eq(2).click(function() {
                // 淡入淡出切换 fadeToggle()
                $("div").fadeToggle(1000);

            });
            $("button").eq(3).click(function() {
                //  修改透明度 fadeTo() 这个速度和透明度要必须写
                $("div").fadeTo(1000, 0.5);

            });


        });
    </script>
案例：高亮显示案例

        $(function() {
            //鼠标进入的时候,其他的li标签透明度：0.5
            $(".wrap li").hover(function() {
                $(this).siblings().stop().fadeTo(400, 0.5);
            }, function() {
                // 鼠标离开，其他li 透明度改为 1
                $(this).siblings().stop().fadeTo(400, 1);
            })

        });
    </script>
</head>

<body>
    <div class="wrap">
        <ul>
            <li>
                <a href="#"><img src="images/01.jpg" alt="" /></a>
            </li>
            <li>
                <a href="#"><img src="images/02.jpg" alt="" /></a>
            </li>
            <li>
                <a href="#"><img src="images/03.jpg" alt="" /></a>
            </li>
            <li>
                <a href="#"><img src="images/04.jpg" alt="" /></a>
            </li>
            <li>
                <a href="#"><img src="images/05.jpg" alt="" /></a>
            </li>
            <li>
                <a href="#"><img src="images/06.jpg" alt="" /></a>
            </li>
        </ul>
    </div>
</body>
5.6自定义动画animate
animate(params,[speed],[easing],[fn]) 
params:一组包含作为动画属性和终值的样式属性和及其值的集合[想要更改的css样式属性，以对象形式传递，必须写。属性名可以不用带引号，如果是复合属性需要采用驼峰命名法borderLeft。其余参数可以省略]
speed:三种预定速度之一的字符串("slow","normal", or "fast")或表示动画时长的毫秒数值(如：1000)
easing:（Optional）用来制定切换效果，默认是"swing"（由慢到快）,可用参数"linear"（匀速）
fn:在动画完成时执行的函数，每个元素执行一次。
案例：
 div {
            position: absolute;
            width: 200px;
            height: 200px;
            background-color: pink;
        }
    </style>
</head>

<body>
    <button>动起来</button>
    <div></div>
    <script>
        $(function() {
            $("button").click(function() {
                $("div").animate({
                //别忘记加定位 position: absolute
                    left: 500,
                    top: 300,
                    opacity: .4,//不透明度为0.4
                    width: 500
                }, 500);
            })
        })
效果：



案例：王者荣耀手风琴效果



布局分析：
每个li里面都包含两张图片一张大图片、一张小图片，每张照片都浮动起来，第一张大图片默认为display: block，小图片默认为display: none，其他图片反之
效果分析:
1.鼠标经过小li有两步操作：
2.当前小li宽度为224px，同时里面的小图片淡出，大图片淡入
3.其余兄弟小li宽度变为69px，小图片淡入，大图片淡出

    <ti
    <style type="text/css">        
        * {
            margin: 0;
            padding: 0;
        }
        
        img {
            display: block;
        }
        
        ul {
            list-style: none;
        }
        
        .king {
            width: 852px;
            margin: 100px auto;
            background: url(images/bg.png) no-repeat;
            overflow: hidden;
            padding: 10px;
        }
        
        .king ul {
            overflow: hidden;
        }
        
        .king li {
            position: relative;
            float: left;
            width: 69px;
            height: 69px;
            margin-right: 10px;
        }
        
        .king li.current {
            width: 224px;
        }
        
        .king li.current .big {
            display: block;
        }
        
        .king li.current .small {
            display: none;
        }
        
        .big {
            width: 224px;
            display: none;
        }
        
        .small {
            position: absolute;
            top: 0;
            left: 0;
            width: 69px;
            height: 69px;
            border-radius: 5px;
        }
    </style>

</head>

<body>
    <script src="js/jquery.min.js"></script>
    <script type="text/javascript">
        $(function() {
            // 鼠标经过某个小li 有两步操作：
            $(".king li").mouseenter(function() {
                // 1.当前小li 宽度变为 224px， 同时里面的小图片淡出，大图片淡入
                $(this).stop().animate({
                    width: 224
                }).find(".small").stop().fadeOut().siblings(".big").stop().fadeIn();
                // 2.其余兄弟小li宽度变为69px， 小图片淡入， 大图片淡出
                $(this).siblings("li").stop().animate({
                    width: 69
                }).find(".small").stop().fadeIn().siblings(".big").stop().fadeOut();
            })



        });
    </script>
    <div class="king">
        <ul>
            <li class="current">
                <a href="#">
                    <img src="images/m1.jpg" alt="" class="small">
                    <img src="images/m.png" alt="" class="big">
                </a>
            </li>
            <li>
                <a href="#">
                    <img src="images/l1.jpg" alt="" class="small">
                    <img src="images/l.png" alt="" class="big">
                </a>
            </li>
            <li>
                <a href="#">
                    <img src="images/c1.jpg" alt="" class="small">
                    <img src="images/c.png" alt="" class="big">
                </a>
            </li>
            <li>
                <a href="#">
                    <img src="images/w1.jpg" alt="" class="small">
                    <img src="images/w.png" alt="" class="big">
                </a>
            </li>
            <li>
                <a href="#">
                    <img src="images/z1.jpg" alt="" class="small">
                    <img src="images/z.png" alt="" class="big">
                </a>
            </li>
            <li>
                <a href="#">
                    <img src="images/h1.jpg" alt="" class="small">
                    <img src="images/h.png" alt="" class="big">
                </a>
            </li>
            <li>
                <a href="#">
                    <img src="images/t1.jpg" alt="" class="small">
                    <img src="images/t.png" alt="" class="big">
                </a>
            </li>
        </ul>

    </div>




6.jQuery属性操作
6.1设置或者获取元素固有属性值 prop（）
所谓元素固有属性就是元素本身就自带的属性，比如<a>里面的href，比如<input>元素里的type




<
    <a href="http://www.itcast.cn" title="都挺好">都挺好</a>
    <input type="checkbox" name="" id="" checked>
    <div index="1" data-index="2">我是div</div>
    <span>123</span>
    <script>
        $(function() {
            //1. element.prop("属性名") 获取元素固有的属性值
            console.log($("a").prop("href"));
            //2. element.prop("属性名","属性值") 设置属性
            $("a").prop("title", "我们都挺好");
            //change事件，当元素发生改变时触发
            $("input").change(function() {
                console.log($(this).prop("checked"));//checked属性(都挺好后面那个)会根据选择与否返回true、false                

            });
            // console.log($("div").prop("index"));
            // 2. 元素的自定义属性 我们通过 attr()获取和修改
            //element.attr("属性名") 获取元素自定义的属性值，类似原生的getAttribute
            console.log($("div").attr("index"));
            //element.attr("属性名"，"属性值") 设置元素自定义的属性，类似原生的setAttribute
            $("div").attr("index", 4);
            console.log($("div").attr("data-index"));
            // 3. 数据缓存 data() 这个里面的数据是存放(缓存)在元素的内存里面
            //数据缓存data()方法可以在指定元素上存取数据，并不会修改DOM元素结构。一单页面刷新，之前存放的数据都将被移除
            //就是把元素当做一个变量看，把相关数值存到变量里，只不过DOM元素里看不见
            $("span").data("uname", "andy");
            console.log($("span").data("uname"));
            // 这个方法获取data-index h5自定义属性 第一个 不用写data-  而且返回的是数字型
            console.log($("div").data("index"));





        })
    </script>
</body>
案例：购物车案例模块-全选


1.全选思路：里面3个小的复选框按钮（j-checkbox）选中状态（checked）跟着全选按钮（checkall）走
2.因为checked是复选框的固有属性，此时我们需要利用prop（）方法获取和设置该属性。
3.把全选按钮状态赋值给三个小复选框就可以了
4.当我们每次点击小的复选框按钮，就来判断：
5.如果小复选框被选中的个数等于3就应该把全选按钮选上，否则全选按钮不选
6.:checked选择器   :checked查找被选中的表单元素
console.log($(".j-checkbox:checked"));



$(function() {
    // 1. 全选 全不选功能模块
    // 就是把全选按钮（checkall）的状态赋值给 三个小的按钮（j-checkbox）就可以了
    // 事件可以使用change
    $(".checkall").change(function() {
        // console.log($(this).prop("checked"));
        $(".j-checkbox, .checkall").prop("checked", $(this).prop("checked"));
        if ($(this).prop("checked")) {
            // 让所有的商品添加 check-cart-item 类名
            $(".cart-item").addClass("check-cart-item");
        } else {
            // check-cart-item 移除
            $(".cart-item").removeClass("check-cart-item");
        }
    });
    // 2. 如果小复选框被选中的个数等于3 就应该把全选按钮选上，否则全选按钮不选。
    $(".j-checkbox").change(function() {
        // if(被选中的小的复选框的个数 === 3) {
        //     就要选中全选按钮
        // } else {
        //     不要选中全选按钮
        // }
        // console.log($(".j-checkbox:checked").length);
        // $(".j-checkbox").length 这个是所有的小复选框的个数
        if ($(".j-checkbox:checked").length === $(".j-checkbox").length) {
            $(".checkall").prop("checked", true);
        } else {
            $(".checkall").prop("checked", false);
        }
       
    });
    
7.jQuery内容文本属性
主要对元素内容还有表单的值操作
1.普通元素内容html()（相当于原生inner HTML）
<
    <div>
        <span>我是内容</span>
    </div>
    <input type="text" value="请输入内容">
    <script>
        // 1. 获取设置元素的内容 html()[相当于原生innerHTML]
        console.log($("div").html());
        // $("div").html("123");修改设置元素的内容：变成<div>123</div>
        // 2. 获取设置元素的文本内容(只获取文本内容，不获得标签) text() [相当于原生innerText]
        console.log($("div").text());
        $("div").text("123");修改设置元素的文本内容：变成<div>123</div>


        // 3. 获取设置表单值 val()
        console.log($("input").val());
        $("input").val("123"); 修改设置表单值
    </script>
</body>



案例：购物车案例模块-增减商品数量


1.核心思路：首先声明一个变量，当我们点击+号（increment），就让这个值++，然后赋值给文本框
2.注意1：只能增加本商品数量，就是当前+号的兄弟文本框（itxt）的值
3.修改表单的值是val（）方法
4.注意2：这个变量的初始值应该是文本框的值，在这个值基础上++，所以要获取表单的值
5.减号（decrement）思路同理，但如果文本框的值是1，就不能再减了
// 3. 增减商品数量模块 首先声明一个变量，当我们点击+号（increment），就让这个值++，然后赋值给文本框。
    $(".increment").click(function() {
        // 得到当前兄弟文本框的值
        var n = $(this).siblings(".itxt").val();
        // console.log(n);
        n++;
        $(this).siblings(".itxt").val(n);
        
    });
    $(".decrement").click(function() {
        // 得到当前兄弟文本框的值
        var n = $(this).siblings(".itxt").val();
        if (n == 1) {
            return false;//代码中遇到return后面的代码就不再会去执行了(在本次事件里)
        }
        // console.log(n);
        n--;
        $(this).siblings(".itxt").val(n);
        
    });
   
})
案例：购物车案例模块-修改商品小计
核心思路：每次点击+号或者-号，根据文本框的值乘以当前的商品的价格 就是商品的小计
注意1：只能增加本商品的小计，就是当前商品的小计模块（p-sum）
修改普通元素的内容是text（）方法
注意2：当前商品的价格，要把￥符号去掉再相乘截取字符串substr（1）
parents（‘选择器’）刻意返回指定的祖先元素
toFixed(2) 可以让我们保留2位小数
用户也可以修改表单文本框的值，同样要计算小计，用表单change事件  
用最新的表单内的值乘以单价即可，但还是计算的当前商品小计


// 3. 增减商品数量模块 首先声明一个变量，当我们点击+号（increment），就让这个值++，然后赋值给文本框。
    $(".increment").click(function() {
        // 得到当前兄弟文本框的值
        var n = $(this).siblings(".itxt").val();
        // console.log(n);
        n++;
        $(this).siblings(".itxt").val(n);
        // 3. 计算小计模块 根据文本框的值 乘以 当前商品的价格  就是 商品的小计
        // 当前商品的价格 p 
        //  var p = $(this).parent().parent().siblings(".p-price").html();与下一行等价

        var p = $(this).parents(".p-num").siblings(".p-price").html();
        // console.log(p);
        p = p.substr(1);
        console.log(p);
        var price = (p * n).toFixed(2);
        // 小计模块 
        // toFixed(2) 可以让我们保留2位小数
        $(this).parents(".p-num").siblings(".p-sum").html("￥" + price);
        getSum();
    });
    $(".decrement").click(function() {
        // 得到当前兄弟文本框的值
        var n = $(this).siblings(".itxt").val();
        if (n == 1) {
            return false;//代码中遇到return后面的代码就不再会去执行了(在本次事件里)
        }
        // console.log(n);
        n--;
        $(this).siblings(".itxt").val(n);
        // var p = $(this).parent().parent().siblings(".p-price").html();
        // parents(".p-num") 返回指定的祖先元素
        var p = $(this).parents(".p-num").siblings(".p-price").html();
        // console.log(p);
        p = p.substr(1);
        console.log(p);
        // 小计模块 
        $(this).parents(".p-num").siblings(".p-sum").html("￥" + (p * n).toFixed(2));
        getSum();
    });
    //  4. 用户修改文本框的值 计算 小计模块  
    $(".itxt").change(function() {
        // 先得到文本框的里面的值 乘以 当前商品的单价 
        var n = $(this).val();
        // 当前商品的单价
        var p = $(this).parents(".p-num").siblings(".p-price").html();
        // console.log(p);
        p = p.substr(1);
        $(this).parents(".p-num").siblings(".p-sum").html("￥" + (p * n).toFixed(2));
        getSum();
    });
   
  
8.jQuery元素操作
主要是遍历、创建、添加、删除元素操作
8.1遍历元素
jQuery隐式迭代是对同一类元素做了同样的操作。如果想要给同一类元素做不同操作，就要用到遍历。
语法一：$(''div'').each(function (index,domEle){xxx;})
1.each()方法遍历匹配的每一个元素。主要用DOM处理。each 每一个（类似for，但是比for强大,都是对每一个元素依次遍历操作）
2.里面的回调函数有两个参数：index是每个元素的索引号；demEle是每个DOM元素对象，不是jQuery对象
3.所以要想使用jquery方法，需要给这个DOM元素转换为jquery对象$(domEle)

<
    <div>1</div>
    <div>2</div>
    <div>3</div>
    <script>
        $(function() {
            // $("div").css("color", "red");
            // 如果针对于同一类元素做不同操作，需要用到遍历元素（类似for，但是比for强大）
            var sum = 0;
            // 1. each() 方法遍历元素 
            var arr = ["red", "green", "blue"];
            $("div").each(function(i, domEle) {
                // 回调函数第一个参数一定是索引号  可以自己指定索引号号名称
                // console.log(index);
                 console.log(i);
                // 回调函数第二个参数一定是 dom元素对象 也是自己命名
                // console.log(domEle);
                // domEle.css("color"); dom对象没有css方法
                $(domEle).css("color", arr[i]);
                sum += parseInt($(domEle).text());//一定要转化成数字型，因为在元素里它们都是字符型的，直接相加就是字符串拼接
            })
            console.log(sum);
            // 2. $.each() 方法遍历元素 主要用于遍历数据，处理数据
            // $.each($("div"), function(i, ele) {
            //     console.log(i);
            //     console.log(ele);

            // });
            // $.each(arr, function(i, ele) {
            //     console.log(i);
            //     console.log(ele);


            // })
            $.each({
                name: "andy",
                age: 18
            }, function(i, ele) {
                console.log(i); // 输出的是 name age 属性名
                console.log(ele); // 输出的是 andy  18 属性值


            })
        })
    </script>
注意：同for循环一样，一个元素遍历完以后再继续遍历下一个元素


语法二：$.each(object,function(index,element){xxx;})
1.$.each()方法可用于遍历任何对象。主要用于数据处理，比如数组，对象
2.里面的函数有两个参数：index是每个元素的索引号；element遍历内容
 <
 <div>1</div>
    <div>2</div>
    <div>3</div>
    <script>
     
             var arr = ["red", "green", "blue"];   
            // 2. $.each() 方法遍历元素 主要用于遍历数据，处理数据
            //1.遍历DOM元素
             $.each($("div"), function(i, ele) {
                 console.log(i);
                 console.log(ele);

             });
             $.each(arr, function(i, ele) {
                 console.log(i);
                 console.log(ele);


             })
            $.each({
                name: "andy",
                age: 18
            }, function(i, ele) {
                console.log(i); // 输出的是 name age 属性名
                console.log(ele); // 输出的是 andy  18 属性值


            })
        })
    </script>






案例：购物车模块-计算总件数和总额
1.核心思路：把所有文本框里面的值相加就是总计数量。总额同理
2.文本框里面的值不相同，如果想要相加需要用到each遍历。声明一个变量，相加即可
3.点击+-，会改变总计和总额，如果用户修改了文本框里面的值同样会改变总计和总额
4.因此可以封装一个函数求总计和总额的，以上两个操作调用这个函数即可
5.注意1：总计是文本框里面的值相加用val（） 总额是普通元素的内容用text（）
6.要注意普通元素里面的内容要去掉￥并且转换成数字型才能相加
 // 5. 计算总计和总额模块
    getSum();

    function getSum() {
        var count = 0; // 计算总件数 
        var money = 0; // 计算总价钱
        $(".itxt").each(function(i, ele) {
            count += parseInt($(ele).val());
        });
        $(".amount-sum em").text(count);
        $(".p-sum").each(function(i, ele) {
            money += parseFloat($(ele).text().substr(1));
        });
        $(".price-sum em").text("￥" + money.toFixed(2));
    }
8.2创建元素
语法：
$("<li></li>");
动态地创建了一个li标签，注意只是创建还没有添加
8.3添加元素
1.内部添加 ：把创建的内容放到element元素里面去
element.append("内容")//把内容放入匹配元素内部的最后面，类似原生的appendChild
element.prepend("内容")//把内容放入匹配元素内部的最前面
1.外部添加 ：把创建的内容放到element元素前后去
element.after("内容")//把内容放入匹配元素后面
element.before("内容")//把内容放入匹配元素前面
1.删除元素
$("ul").remove(); 可以删除匹配的元素 自杀
$("ul").empty();  可以删除匹配的元素里面的子节点 孩子
$("ul").html("");  可以删除匹配的元素里面的子节点 孩子   $("ul").html();是返回元素内容

<
    <ul>
        <li>原先的li</li>
    </ul>
    <div class="test">我是原先的div</div>
    <script>
        $(function() {
            // 1. 创建元素
            var li = $("<li>我是后来创建的li</li>");
            // 2. 添加元素

            // (1) 内部添加
            // $("ul").append(li);  内部添加并且放到内容的最后面 
            $("ul").prepend(li); // 内部添加并且放到内容的最前面

            // (2) 外部添加
            var div = $("<div>我是后妈生的</div>");
            // $(".test").after(div);
            $(".test").before(div);
            // 3. 删除元素
            // $("ul").remove(); 可以删除匹配的元素 自杀
            // $("ul").empty(); // 可以删除匹配的元素里面的子节点 孩子
            $("ul").html(""); // 可以删除匹配的元素里面的子节点 孩子

        })
    </script>
购物车模块-清空购物车
  // 6. 删除商品模块
    // (1) 商品后面的删除按钮
    $(".p-action a").click(function() {
        // 删除的是当前的商品 
        $(this).parents(".cart-item").remove();
        getSum();
    });
    // (2) 删除选中的商品
    $(".remove-batch").click(function() {
        // 删除的是小的复选框选中的商品
        $(".j-checkbox:checked").parents(".cart-item").remove();
        getSum();
    });
    // (3) 清空购物车 删除全部商品
    $(".clear-all").click(function() {
        $(".cart-item").remove();
        getSum();
    })
})

9.jQuery尺寸、位置操作
9.1jQuery尺寸

（）内空着就是获取宽高，并且返回的是数字型
（）加入数字(不用加单位)就是修改宽高
 <s
        div {
            width: 200px;
            height: 200px;
            background-color: pink;
            padding: 10px;
            border: 15px solid red;
            margin: 20px;
        }
    </style>
    <script src="jquery.min.js"></script>
</head>

<body>
    <div></div>
    <script>
        $(function() {
            // 1. width() / height() 获取设置元素 width和height大小 
            console.log($("div").width());
            // $("div").width(300);

            // 2. innerWidth() / innerHeight()  获取设置元素 width和height + padding 大小 
            console.log($("div").innerWidth());

            // 3. outerWidth()  / outerHeight()  获取设置元素 width和height + padding + border 大小 
            console.log($("div").outerWidth());

            // 4. outerWidth(true) / outerHeight(true) 获取设置 width和height + padding + border + margin
            console.log($("div").outerWidth(true));


        })
    </script>
9.2jQuery位置
位置主要有三个：offset()、position()、scrollTop()/scrollLeft()
1.offest（）获取或者获取元素偏移
offset（）设置或返回被选元素相对于文档的偏移坐标，跟父级没有关系
2.positon（）获取或者获取元素偏移
 position（）返回被选元素带有定位的父级的偏移坐标，  如果没有带有定位的父级，则以文档为准 【只能获取不能设置】
 <s
        * {
            margin: 0;
            padding: 0;
        }
        
        .father {
            width: 400px;
            height: 400px;
            background-color: pink;
            margin: 100px;
            overflow: hidden;
            position: relative;
        }
        
        .son {
            width: 150px;
            height: 150px;
            background-color: purple;
            position: absolute;
            left: 10px;
            top: 10px;
        }
    </style>
    <script src="jquery.min.js"></script>
</head>

<body>
    <div class="father">
        <div class="son"></div>
    </div>
    <script>
        $(function() {
            // 1. 获取设置距离文档的位置（偏移） offset
            console.log($(".son").offset());//获得一个对象，对象里有left和top属性
            console.log($(".son").offset().top);//获得对象的top值
            //修改位置
            // $(".son").offset({
            //     top: 200,
            //     left: 200
            // });
            // 2. 获取距离带有定位父级位置（偏移） position   如果没有带有定位的父级，则以文档为准
            
            console.log($(".son").position());//获得一个对象，对象里有left和top属性
            // 这个方法只能获取不能设置偏移
            // $(".son").position({
            //     top: 200,
            //     left: 200
            // });
        })
    </script>
3.scrollTop与scrollLeft设置或者获取元素被卷去的头部和左侧
1.scrollTop（）设置或返回被选元素被卷去的头部
1.scrollLeft（）设置或返回被选元素被卷去的左侧
 
<bo
    <div class="back">返回顶部</div>
    <div class="container">
    </div>
    <script>
        $(function() {
            //设置被卷去的头部位置
            $(document).scrollTop(100);
            // 被卷去的头部 scrollTop()  / 被卷去的左侧 scrollLeft()            
            var boxTop = $(".container").offset().top;
            // 页面滚动事件
            $(window).scroll(function() {
                // console.log(11);
                console.log($(document).scrollTop());
                if ($(document).scrollTop() >= boxTop) {
                    $(".back").fadeIn();
                } else {
                    $(".back").fadeOut();
                }
            });
            // 返回顶部
            $(".back").click(function() {
                // $(document).scrollTop(0);
                $("body, html").stop().animate({
                    scrollTop: 0
                });
                // $(document).stop().animate({
                //     scrollTop: 0
                // }); 不能是文档而是 html和body元素做动画 ，因为annimate()只对元素做动画
            })
        })
    </script>
