思考：为什么 JavaScript 可以操作 DOM 和 BOM

每个浏览器都内置了 DOM、BOM 这样的 API 
函数，因此，浏览器中的 JavaScript 代码才可以调
用它们。然后到解析引擎执行

 浏览器中的 JavaScript 运行环境
运行环境是指代码正常运行所需的必要环境。

总结：
① V8 引擎负责解析和执行 JavaScript 代码。
② 内置 API 是由运行环境（浏览器）提供的特殊接口，只能在所属的运行环境中被调用。

1.初识Node.js
思考：JavaScript 能否做后端开发
可以，js就是一门语言，在浏览器运行就是就是做前端开发。在Node.js这一后端运行环境运行就是做后端开发。
1.2 Node.js 简介
1. 什么是 Node.js
Node.js® is a JavaScript runtime built on Chrome's V8 JavaScript engine.
Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。
Node.js 的官网地址： https://nodejs.org/zh-cn/

2. Node.js 中的 JavaScript 运行环境
Ajax AP

注意：
① 浏览器是 JavaScript 的前端运行环境。 
② Node.js 是 JavaScript 的后端运行环境。 
③ Node.js 中无法调用 DOM 和 BOM 等浏览器内置 API。
3. Node.js 可以做什么
Node.js 作为一个 JavaScript 的运行环境，仅仅提供了基础的功能和 API。然而，基于 Node.js 提供的这些基础功能，很多强大
的工具和框架如雨后春笋，层出不穷，所以学会了 Node.js ，可以让前端程序员胜任更多的工作和岗位：
① 基于 Express 框架（http://www.expressjs.com.cn/），可以快速构建 Web 应用
② 基于 Electron 框架（https://electronjs.org/），可以构建跨平台的桌面应用
③ 基于 restify 框架（http://restify.com/），可以快速构建 API 接口项目（像后端程序员一样写接口）
④ 读写和操作数据库、创建实用的命令行工具辅助前端开发、etc…
总之：Node.js 是大前端时代的“大宝剑”，有了 Node.js 这个超级 buff 的加持，前端程序员的行业竞争力会越来越强！
4. Node.js 怎么学
浏览器中的 JavaScript 学习路径：
JavaScript 基础语法 + 浏览器内置 API（DOM + BOM） + 第三方库（jQuery、art-template 等）
Node.js 的学习路径：
JavaScript 基础语法 + Node.js 内置 API 模块（fs、path、http等）+ 第三方 API 模块（express、mysql 等）
1.3 Node.js 环境的安装
如果希望通过 Node.js 来运行 Javascript 代码，则必须在计算机上安装 Node.js 环境才行。
安装包可以从 Node.js 的官网首页直接下载，进入到 Node.js 的官网首页（https://nodejs.org/en/），点击
绿色的按钮，下载所需的版本后，双击直接安装即可

1. 区分 LTS 版本和 Current 版本的不同
① LTS 为长期稳定版，对于追求稳定性的企业级项目来说，推荐安装 LTS 版本的 Node.js。 
② Current 为新特性尝鲜版，对热衷于尝试新特性的用户来说，推荐安装 Current 版本的 Node.js。但是，Current 版本中可
能存在隐藏的 Bug 或安全性漏洞，因此不推荐在企业级项目中使用 Current 版本的 Node.js。
2. 查看已安装的 Node.js 的版本号
打开终端，在终端输入命令 node –v 后，按下回车键，即可查看已安装的 Node.js 的版本号。
Windows 系统快速打开终端的方式：
使用快捷键（Windows徽标键 + R）打开运行面板，输入 cmd 后直接回车，即可打开终端
3. 什么是终端

终端（英文：Terminal）是专门为开发人员设计的，用于实现人机交互的一种方式。
作为一名合格的程序员，我们有必要识记一些常用的终端命令，来辅助我们更好的操作与使用计算机。
1.4 在 Node.js 环境中执行 JavaScript 代码
① 打开终端
② 输入 node 要执行的js文件的路径 回车
1. 终端中的快捷键
在 Windows 的 powershell 或 cmd 终端中，我们可以通过如下快捷键，来提高终端的操作效率：
mac上也可以用
① 使用 ↑ 键，可以快速定位到上一次执行的命令
② 使用 tab 键，能够快速补全路径
③ 使用 esc 键/mac  control+u ，能够快速清空当前已输入的命令(但所处地址位置不会清空仍在原位置)
④ 输入 cls 命令/command+k，可以清空终端
mac中终端的快捷键：
Ctrl+a：光标回到命令行首。 （a：ahead）
Ctrl+e：光标回到命令行尾。 （e：end）
Ctrl+b：光标向行首移动一个字符。 （b：backwards）
Ctrl+ f：光标向行尾移动一个字符。 （f：forwards）
Ctrl+w: 删除光标处到行首的字符。
Ctrl+k：删除光标处到行尾的字符。
Ctrl+u：删除整个命令行文本字符。
Ctrl+h：向行首删除一个字符。
Ctrl+d：向行尾删除一个字符。
Ctrl+y:：粘贴Ctrl+u，Ctrl+k，Ctrl+w删除的文本。
Ctrl+p: 上一个使用的历史命令。 （p：previous）
Ctrl+n： 下一个使用的历史命令。（n：next ）
Ctrl+r：快速检索历史命令。（r：retrieve）。
Ctrl+t： 交换光标所在字符和其前的字符。
Ctrl+i：相当于Tab键。
Ctrl+o：相当于Ctrl+m.
Ctrl+m：相当Enter键。
Ctrl+s:使终端发呆，静止，可以使快速输出的终端屏幕停下来。
Ctrl+q：退出Ctrl+s引起的发呆。
Ctrl+z：使正在运行在终端的任务，运行于后台。 （可用fg恢复）
Ctrl+c：中断终端中正在执行的任务。
Ctrl+d: 在空命令行的情况下可以退出终端。
Ctrl+[ ：相当于Esc键。
Esc键：连续按3次显示所有的支持的终端命令。
2. fs 文件系统模块
2.1 什么是 fs 文件系统模块
fs 模块是 Node.js 官方提供的、用来操作文件的模块。它提供了一系列的方法和属性，用来满足用户对文件的操作需求。
例如：
⚫ fs.readFile() 方法，用来读取指定文件中的内容
⚫ fs.writeFile() 方法，用来向指定的文件中写入内容
如果要在 JavaScript 代码中，使用 fs 模块来操作文件，则需要使用如下的方式先导入它：

2.2 读取指定文件中的内容
1. fs.readFile() 的语法格式
使用 fs.readFile() 方法，可以读取指定文件中的内容，语法格式如下：

参数解读：
⚫ 参数1：必选参数，字符串，表示文件的路径。
⚫ 参数2：可选参数，表示以什么编码格式来读取文件。
⚫ 参数3：必选参数，文件读取完成后，通过回调函数拿到读取的结果。
// 1. 导入 fs 模块，来操作文件
const fs = require('fs')

// 2. 调用 fs.readFile() 方法读取文件
//    参数1：读取文件的存放路径
//    参数2：读取文件时候采用的编码格式，一般默认指定 utf8
//    参数3：回调函数，拿到读取失败和成功的结果  err  dataStr
fs.readFile('./files/11.txt', 'utf8', function(err, dataStr) {
  // 2.1 打印失败的结果
  // 如果读取成功，则 err 的值为 null
  // 如果读取失败，则 err 的值为 错误对象，dataStr 的值为 undefined
  console.log(err)
  console.log('-------')
  // 2.2 打印成功的结果,这里就是读取了11.txt的内容111 dataStr 的值为 111
  console.log(dataStr)
})
2. fs.readFile() 的示例代码
以 utf8 的编码格式，读取指定文件的内容，并打印 err 和 dataStr 的值：

3. 判断文件是否读取成功
可以判断 err 对象是否为 null，从而知晓文件读取的结果：

2.3 向指定的文件中写入内容
1. fs.writeFile() 的语法格式
使用 fs.writeFile() 方法，可以向指定的文件中写入内容，语法格式如下：

参数解读：
⚫ 参数1：必选参数，需要指定一个文件路径的字符串，表示文件的存放路径。
⚫ 参数2：必选参数，表示要写入的内容。
⚫ 参数3：可选参数，表示以什么格式写入文件内容，默认值是 utf8。 
⚫ 参数4：必选参数，文件写入完成后的回调函数
2. fs.writeFile() 的示例代码
向指定的文件路径中，写入文件内容

// 1. 导入 fs 文件系统模块
const fs = require('fs')

// 2. 调用 fs.writeFile() 方法，写入文件的内容
//    参数1：表示文件的存放路径
//    参数2：表示要写入的内容
//    参数3：回调函数
fs.writeFile('./files/3.txt', 'ok123', function(err) {
  // 2.1 如果文件写入成功，则 err 的值等于 null
  // 2.2 如果文件写入失败，则 err 的值等于一个 错误对象
  // console.log(err)

  if (err) {
    return console.log('文件写入失败！' + err.message)
  }
  console.log('文件写入成功！')
})
3. 判断文件是否写入成功
可以判断 err 对象是否为 null，从而知晓文件写入的结果：

2.5 练习 - 考试成绩整理
使用 fs 文件系统模块，将素材目录下成绩.txt文件中的考试数据，整理到成绩-ok.txt文件中。
整理前，成绩.txt文件中的数据格式如下：

核心实现步骤
① 导入需要的 fs 文件系统模块
② 使用 fs.readFile() 方法，读取素材目录下的 成绩.txt 文件
③ 判断文件是否读取失败
④ 文件读取成功后，处理成绩数据
⑤ 将处理完成的成绩数据，调用 fs.writeFile() 方法，写入到新文件 成绩-ok.txt 中
// 1. 导入 fs 模块
const fs = require('fs')

// 2. 调用 fs.readFile() 读取文件的内容
fs.readFile('../素材/成绩.txt', 'utf8', function(err, dataStr) {
  // 3. 判断是否读取成功
  if (err) {
    return console.log('读取文件失败！' + err.message)
  }
  // console.log('读取文件成功！' + dataStr)

  // 4.1 先把成绩的数据，按照空格进行分割
  const arrOld = dataStr.split(' ')
  // 4.2 循环分割后的数组，对每一项数据，进行字符串的替换操作
  const arrNew = []
  arrOld.forEach(item => {
    arrNew.push(item.replace('=', '：'))
  })
  // 4.3 把新数组中的每一项，进行合并，得到一个新的字符串
  const newStr = arrNew.join('\r\n')

  // 5. 调用 fs.writeFile() 方法，把处理完毕的成绩，写入到新文件中
  fs.writeFile('./files/成绩-ok.txt', newStr, function(err) {
    if (err) {
      return console.log('写入文件失败！' + err.message)
    }
    console.log('成绩写入成功！')
  })
})
2.6 fs 模块 - 路径动态拼接的问题
在使用 fs 模块操作文件时，如果提供的操作路径是以 ./ 或 ../ 开头的相对路径时，很容易出现路径动态拼接错误的问题。
原因：代码在运行的时候，会以执行 node 命令时所处的目录，动态拼接出被操作文件的完整路径。
解决方案：在使用 fs 模块操作文件时，直接提供完整的路径，不要提供 ./ 或 ../ 开头的相对路径，从而防止路径动态拼接的问题


const fs = require('fs')

// 出现路径拼接错误的问题，是因为提供了 ./ 或 ../ 开头的相对路径
// 如果要解决这个问题，可以直接提供一个完整的文件存放路径就行 记得补全\\，因为\是转义字符
/* fs.readFile('./files/1.txt', 'utf8', function(err, dataStr) {
  if (err) {
    return console.log('读取文件失败！' + err.message)
  }
  console.log('读取文件成功！' + dataStr)
}) */

// 移植性非常差、不利于维护
/* fs.readFile('C:\\Users\\escook\\Desktop\\Node.js基础\\day1\\code\\files\\1.txt', 'utf8', function(err, dataStr) {
  if (err) {
    return console.log('读取文件失败！' + err.message)
  }
  console.log('读取文件成功！' + dataStr)
}) */

// __dirname 表示当前文件所处的目录
// console.log(__dirname)

fs.readFile(__dirname + '/files/1.txt', 'utf8', function(err, dataStr) {
  if (err) {
    return console.log('读取文件失败！' + err.message)
  }
  console.log('读取文件成功！' + dataStr)
})
